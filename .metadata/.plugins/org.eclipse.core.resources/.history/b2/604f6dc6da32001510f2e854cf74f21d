// Generated from BKOOL.g4 by ANTLR 4.5

	package bkool.parser;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BKOOLLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CONST_DECL=1, LINE_CMT=2, WS=3, START_CMT_BLOCK=4, END_CMT_BLOCK=5, ID=6, 
		BOOL=7, BREAK=8, CLASS=9, CONTINUE=10, DO=11, ELSE=12, EXTENDS=13, FALSE=14, 
		FINAL=15, FLOAT=16, IF=17, INTEGER=18, NEW=19, NULL=20, RETURN=21, SELF=22, 
		STATIC=23, STRING=24, THEN=25, TRUE=26, VOID=27, WHILE=28, ADD=29, SUB=30, 
		MUL=31, FLOAT_DIV=32, INT_DIV=33, MOD=34, DIFF=35, EQUAL=36, LESS=37, 
		GREATER=38, LESS_OR_EQUAL=39, GREATER_OR_EQUAL=40, LOGICAL_OR=41, LOGICAL_AND=42, 
		LOGICAL_NOT=43, CONCAT=44, LSB=45, RSB=46, LP=47, RP=48, LB=49, RB=50, 
		SEMICOLON=51, COLON=52, DOT=53, COMMA=54, INT_LITERAL=55, FLOAT_LITERAL=56, 
		BOOL_LITERAL=57, STRING_LITERAL=58, ASSIGN=59, IO=60, UNCLOSE_STRING=61;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"CONST_DECL", "LINE_CMT", "WS", "START_CMT_BLOCK", "END_CMT_BLOCK", "ID", 
		"BOOL", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", "FALSE", 
		"FINAL", "FLOAT", "IF", "INTEGER", "NEW", "NULL", "RETURN", "SELF", "STATIC", 
		"STRING", "THEN", "TRUE", "VOID", "WHILE", "ADD", "SUB", "MUL", "FLOAT_DIV", 
		"INT_DIV", "MOD", "DIFF", "EQUAL", "LESS", "GREATER", "LESS_OR_EQUAL", 
		"GREATER_OR_EQUAL", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "CONCAT", 
		"LSB", "RSB", "LP", "RP", "LB", "RB", "SEMICOLON", "COLON", "DOT", "COMMA", 
		"INT_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", "STRING_LITERAL", "ASSIGN", 
		"IO", "UNCLOSE_STRING"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'='", null, null, "'(*'", "'*)'", null, "'bool'", "'break'", "'class'", 
		"'continue'", "'do'", "'else'", "'extends'", "'false'", "'final'", "'float'", 
		"'if'", "'integer'", "'new'", "'null'", "'return'", "'self'", "'static'", 
		"'string'", "'then'", "'true'", "'void'", "'while'", "'+'", "'-'", "'*'", 
		"'/'", "'\\'", "'%'", "'<>'", "'=='", "'<'", "'>'", "'<='", "'>='", "'||'", 
		"'&&'", "'!'", "'^'", "'['", "']'", "'{'", "'}'", "'('", "')'", "';'", 
		"':'", "'.'", "','", null, null, null, null, "':='", "'io.'", "'\"'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "CONST_DECL", "LINE_CMT", "WS", "START_CMT_BLOCK", "END_CMT_BLOCK", 
		"ID", "BOOL", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", "FALSE", 
		"FINAL", "FLOAT", "IF", "INTEGER", "NEW", "NULL", "RETURN", "SELF", "STATIC", 
		"STRING", "THEN", "TRUE", "VOID", "WHILE", "ADD", "SUB", "MUL", "FLOAT_DIV", 
		"INT_DIV", "MOD", "DIFF", "EQUAL", "LESS", "GREATER", "LESS_OR_EQUAL", 
		"GREATER_OR_EQUAL", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "CONCAT", 
		"LSB", "RSB", "LP", "RP", "LB", "RB", "SEMICOLON", "COLON", "DOT", "COMMA", 
		"INT_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", "STRING_LITERAL", "ASSIGN", 
		"IO", "UNCLOSE_STRING"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public BKOOLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "BKOOL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 60:
			UNCLOSE_STRING_action((RuleContext)_localctx, actionIndex);
			break;
		}
	}
	private void UNCLOSE_STRING_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:
			System.out.print("There is an unclosed string.\n");
			break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2?\u0181\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\3\2\3\2\3\3\3\3\7\3\u0082\n\3\f\3\16\3\u0085\13\3\3\4\6\4\u0088"+
		"\n\4\r\4\16\4\u0089\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\7\7\u0096"+
		"\n\7\f\7\16\7\u0099\13\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3"+
		"\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21"+
		"\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33"+
		"\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3%\3%\3%"+
		"\3&\3&\3\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3-\3-\3.\3.\3"+
		"/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66"+
		"\3\66\3\67\3\67\38\68\u0155\n8\r8\168\u0156\39\69\u015a\n9\r9\169\u015b"+
		"\39\39\69\u0160\n9\r9\169\u0161\59\u0164\n9\39\39\39\69\u0169\n9\r9\16"+
		"9\u016a\3:\3:\3;\3;\7;\u0171\n;\f;\16;\u0174\13;\3;\3;\3<\3<\3<\3=\3="+
		"\3=\3=\3>\3>\3>\2\2?\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27"+
		"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33"+
		"\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63"+
		"e\64g\65i\66k\67m8o9q:s;u<w=y>{?\3\2\13\4\2\f\f``\5\2\13\f\16\17\"\"\6"+
		"\2))C\\aac|\7\2))\62;C\\aac|\3\2\62;\5\2GGgg~~\5\2--//~~\7\2ccghnntw~"+
		"~\5\2$$^^``\u0189\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E"+
		"\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2"+
		"\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2"+
		"\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k"+
		"\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2"+
		"\2\2\2y\3\2\2\2\2{\3\2\2\2\3}\3\2\2\2\5\177\3\2\2\2\7\u0087\3\2\2\2\t"+
		"\u008d\3\2\2\2\13\u0090\3\2\2\2\r\u0093\3\2\2\2\17\u009a\3\2\2\2\21\u009f"+
		"\3\2\2\2\23\u00a5\3\2\2\2\25\u00ab\3\2\2\2\27\u00b4\3\2\2\2\31\u00b7\3"+
		"\2\2\2\33\u00bc\3\2\2\2\35\u00c4\3\2\2\2\37\u00ca\3\2\2\2!\u00d0\3\2\2"+
		"\2#\u00d6\3\2\2\2%\u00d9\3\2\2\2\'\u00e1\3\2\2\2)\u00e5\3\2\2\2+\u00ea"+
		"\3\2\2\2-\u00f1\3\2\2\2/\u00f6\3\2\2\2\61\u00fd\3\2\2\2\63\u0104\3\2\2"+
		"\2\65\u0109\3\2\2\2\67\u010e\3\2\2\29\u0113\3\2\2\2;\u0119\3\2\2\2=\u011b"+
		"\3\2\2\2?\u011d\3\2\2\2A\u011f\3\2\2\2C\u0121\3\2\2\2E\u0123\3\2\2\2G"+
		"\u0125\3\2\2\2I\u0128\3\2\2\2K\u012b\3\2\2\2M\u012d\3\2\2\2O\u012f\3\2"+
		"\2\2Q\u0132\3\2\2\2S\u0135\3\2\2\2U\u0138\3\2\2\2W\u013b\3\2\2\2Y\u013d"+
		"\3\2\2\2[\u013f\3\2\2\2]\u0141\3\2\2\2_\u0143\3\2\2\2a\u0145\3\2\2\2c"+
		"\u0147\3\2\2\2e\u0149\3\2\2\2g\u014b\3\2\2\2i\u014d\3\2\2\2k\u014f\3\2"+
		"\2\2m\u0151\3\2\2\2o\u0154\3\2\2\2q\u0159\3\2\2\2s\u016c\3\2\2\2u\u016e"+
		"\3\2\2\2w\u0177\3\2\2\2y\u017a\3\2\2\2{\u017e\3\2\2\2}~\7?\2\2~\4\3\2"+
		"\2\2\177\u0083\7%\2\2\u0080\u0082\t\2\2\2\u0081\u0080\3\2\2\2\u0082\u0085"+
		"\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084\6\3\2\2\2\u0085"+
		"\u0083\3\2\2\2\u0086\u0088\t\3\2\2\u0087\u0086\3\2\2\2\u0088\u0089\3\2"+
		"\2\2\u0089\u0087\3\2\2\2\u0089\u008a\3\2\2\2\u008a\u008b\3\2\2\2\u008b"+
		"\u008c\b\4\2\2\u008c\b\3\2\2\2\u008d\u008e\7*\2\2\u008e\u008f\7,\2\2\u008f"+
		"\n\3\2\2\2\u0090\u0091\7,\2\2\u0091\u0092\7+\2\2\u0092\f\3\2\2\2\u0093"+
		"\u0097\t\4\2\2\u0094\u0096\t\5\2\2\u0095\u0094\3\2\2\2\u0096\u0099\3\2"+
		"\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098\16\3\2\2\2\u0099\u0097"+
		"\3\2\2\2\u009a\u009b\7d\2\2\u009b\u009c\7q\2\2\u009c\u009d\7q\2\2\u009d"+
		"\u009e\7n\2\2\u009e\20\3\2\2\2\u009f\u00a0\7d\2\2\u00a0\u00a1\7t\2\2\u00a1"+
		"\u00a2\7g\2\2\u00a2\u00a3\7c\2\2\u00a3\u00a4\7m\2\2\u00a4\22\3\2\2\2\u00a5"+
		"\u00a6\7e\2\2\u00a6\u00a7\7n\2\2\u00a7\u00a8\7c\2\2\u00a8\u00a9\7u\2\2"+
		"\u00a9\u00aa\7u\2\2\u00aa\24\3\2\2\2\u00ab\u00ac\7e\2\2\u00ac\u00ad\7"+
		"q\2\2\u00ad\u00ae\7p\2\2\u00ae\u00af\7v\2\2\u00af\u00b0\7k\2\2\u00b0\u00b1"+
		"\7p\2\2\u00b1\u00b2\7w\2\2\u00b2\u00b3\7g\2\2\u00b3\26\3\2\2\2\u00b4\u00b5"+
		"\7f\2\2\u00b5\u00b6\7q\2\2\u00b6\30\3\2\2\2\u00b7\u00b8\7g\2\2\u00b8\u00b9"+
		"\7n\2\2\u00b9\u00ba\7u\2\2\u00ba\u00bb\7g\2\2\u00bb\32\3\2\2\2\u00bc\u00bd"+
		"\7g\2\2\u00bd\u00be\7z\2\2\u00be\u00bf\7v\2\2\u00bf\u00c0\7g\2\2\u00c0"+
		"\u00c1\7p\2\2\u00c1\u00c2\7f\2\2\u00c2\u00c3\7u\2\2\u00c3\34\3\2\2\2\u00c4"+
		"\u00c5\7h\2\2\u00c5\u00c6\7c\2\2\u00c6\u00c7\7n\2\2\u00c7\u00c8\7u\2\2"+
		"\u00c8\u00c9\7g\2\2\u00c9\36\3\2\2\2\u00ca\u00cb\7h\2\2\u00cb\u00cc\7"+
		"k\2\2\u00cc\u00cd\7p\2\2\u00cd\u00ce\7c\2\2\u00ce\u00cf\7n\2\2\u00cf "+
		"\3\2\2\2\u00d0\u00d1\7h\2\2\u00d1\u00d2\7n\2\2\u00d2\u00d3\7q\2\2\u00d3"+
		"\u00d4\7c\2\2\u00d4\u00d5\7v\2\2\u00d5\"\3\2\2\2\u00d6\u00d7\7k\2\2\u00d7"+
		"\u00d8\7h\2\2\u00d8$\3\2\2\2\u00d9\u00da\7k\2\2\u00da\u00db\7p\2\2\u00db"+
		"\u00dc\7v\2\2\u00dc\u00dd\7g\2\2\u00dd\u00de\7i\2\2\u00de\u00df\7g\2\2"+
		"\u00df\u00e0\7t\2\2\u00e0&\3\2\2\2\u00e1\u00e2\7p\2\2\u00e2\u00e3\7g\2"+
		"\2\u00e3\u00e4\7y\2\2\u00e4(\3\2\2\2\u00e5\u00e6\7p\2\2\u00e6\u00e7\7"+
		"w\2\2\u00e7\u00e8\7n\2\2\u00e8\u00e9\7n\2\2\u00e9*\3\2\2\2\u00ea\u00eb"+
		"\7t\2\2\u00eb\u00ec\7g\2\2\u00ec\u00ed\7v\2\2\u00ed\u00ee\7w\2\2\u00ee"+
		"\u00ef\7t\2\2\u00ef\u00f0\7p\2\2\u00f0,\3\2\2\2\u00f1\u00f2\7u\2\2\u00f2"+
		"\u00f3\7g\2\2\u00f3\u00f4\7n\2\2\u00f4\u00f5\7h\2\2\u00f5.\3\2\2\2\u00f6"+
		"\u00f7\7u\2\2\u00f7\u00f8\7v\2\2\u00f8\u00f9\7c\2\2\u00f9\u00fa\7v\2\2"+
		"\u00fa\u00fb\7k\2\2\u00fb\u00fc\7e\2\2\u00fc\60\3\2\2\2\u00fd\u00fe\7"+
		"u\2\2\u00fe\u00ff\7v\2\2\u00ff\u0100\7t\2\2\u0100\u0101\7k\2\2\u0101\u0102"+
		"\7p\2\2\u0102\u0103\7i\2\2\u0103\62\3\2\2\2\u0104\u0105\7v\2\2\u0105\u0106"+
		"\7j\2\2\u0106\u0107\7g\2\2\u0107\u0108\7p\2\2\u0108\64\3\2\2\2\u0109\u010a"+
		"\7v\2\2\u010a\u010b\7t\2\2\u010b\u010c\7w\2\2\u010c\u010d\7g\2\2\u010d"+
		"\66\3\2\2\2\u010e\u010f\7x\2\2\u010f\u0110\7q\2\2\u0110\u0111\7k\2\2\u0111"+
		"\u0112\7f\2\2\u01128\3\2\2\2\u0113\u0114\7y\2\2\u0114\u0115\7j\2\2\u0115"+
		"\u0116\7k\2\2\u0116\u0117\7n\2\2\u0117\u0118\7g\2\2\u0118:\3\2\2\2\u0119"+
		"\u011a\7-\2\2\u011a<\3\2\2\2\u011b\u011c\7/\2\2\u011c>\3\2\2\2\u011d\u011e"+
		"\7,\2\2\u011e@\3\2\2\2\u011f\u0120\7\61\2\2\u0120B\3\2\2\2\u0121\u0122"+
		"\7^\2\2\u0122D\3\2\2\2\u0123\u0124\7\'\2\2\u0124F\3\2\2\2\u0125\u0126"+
		"\7>\2\2\u0126\u0127\7@\2\2\u0127H\3\2\2\2\u0128\u0129\7?\2\2\u0129\u012a"+
		"\7?\2\2\u012aJ\3\2\2\2\u012b\u012c\7>\2\2\u012cL\3\2\2\2\u012d\u012e\7"+
		"@\2\2\u012eN\3\2\2\2\u012f\u0130\7>\2\2\u0130\u0131\7?\2\2\u0131P\3\2"+
		"\2\2\u0132\u0133\7@\2\2\u0133\u0134\7?\2\2\u0134R\3\2\2\2\u0135\u0136"+
		"\7~\2\2\u0136\u0137\7~\2\2\u0137T\3\2\2\2\u0138\u0139\7(\2\2\u0139\u013a"+
		"\7(\2\2\u013aV\3\2\2\2\u013b\u013c\7#\2\2\u013cX\3\2\2\2\u013d\u013e\7"+
		"`\2\2\u013eZ\3\2\2\2\u013f\u0140\7]\2\2\u0140\\\3\2\2\2\u0141\u0142\7"+
		"_\2\2\u0142^\3\2\2\2\u0143\u0144\7}\2\2\u0144`\3\2\2\2\u0145\u0146\7\177"+
		"\2\2\u0146b\3\2\2\2\u0147\u0148\7*\2\2\u0148d\3\2\2\2\u0149\u014a\7+\2"+
		"\2\u014af\3\2\2\2\u014b\u014c\7=\2\2\u014ch\3\2\2\2\u014d\u014e\7<\2\2"+
		"\u014ej\3\2\2\2\u014f\u0150\7\60\2\2\u0150l\3\2\2\2\u0151\u0152\7.\2\2"+
		"\u0152n\3\2\2\2\u0153\u0155\t\6\2\2\u0154\u0153\3\2\2\2\u0155\u0156\3"+
		"\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2\u0157p\3\2\2\2\u0158\u015a"+
		"\t\6\2\2\u0159\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u0159\3\2\2\2\u015b"+
		"\u015c\3\2\2\2\u015c\u0163\3\2\2\2\u015d\u015f\7\60\2\2\u015e\u0160\t"+
		"\6\2\2\u015f\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u015f\3\2\2\2\u0161"+
		"\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u015d\3\2\2\2\u0163\u0164\3\2"+
		"\2\2\u0164\u0165\3\2\2\2\u0165\u0166\t\7\2\2\u0166\u0168\t\b\2\2\u0167"+
		"\u0169\t\6\2\2\u0168\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u0168\3\2"+
		"\2\2\u016a\u016b\3\2\2\2\u016br\3\2\2\2\u016c\u016d\t\t\2\2\u016dt\3\2"+
		"\2\2\u016e\u0172\7$\2\2\u016f\u0171\t\n\2\2\u0170\u016f\3\2\2\2\u0171"+
		"\u0174\3\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\3\2"+
		"\2\2\u0174\u0172\3\2\2\2\u0175\u0176\7$\2\2\u0176v\3\2\2\2\u0177\u0178"+
		"\7<\2\2\u0178\u0179\7?\2\2\u0179x\3\2\2\2\u017a\u017b\7k\2\2\u017b\u017c"+
		"\7q\2\2\u017c\u017d\7\60\2\2\u017dz\3\2\2\2\u017e\u017f\7$\2\2\u017f\u0180"+
		"\b>\3\2\u0180|\3\2\2\2\f\2\u0083\u0089\u0097\u0156\u015b\u0161\u0163\u016a"+
		"\u0172\4\b\2\2\3>\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}