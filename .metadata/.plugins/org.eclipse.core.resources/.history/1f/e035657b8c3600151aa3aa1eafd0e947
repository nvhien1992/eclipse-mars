// Generated from BKOOL.g4 by ANTLR 4.5

	package bkool.parser;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BKOOLLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CONST_DECL=1, STRING_LITERAL=2, UNCLOSE_STRING=3, LINE_CMT=4, BLOCK_CMT=5, 
		WS=6, BOOL=7, BREAK=8, CLASS=9, CONTINUE=10, DO=11, ELSE=12, EXTENDS=13, 
		FALSE=14, FINAL=15, FLOAT=16, IF=17, INTEGER=18, NEW=19, NULL=20, RETURN=21, 
		SELF=22, STATIC=23, STRING=24, THEN=25, TRUE=26, VOID=27, WHILE=28, IO=29, 
		ADD=30, SUB=31, MUL=32, FLOAT_DIV=33, INT_DIV=34, MOD=35, DIFF=36, EQUAL=37, 
		LESS=38, GREATER=39, LESS_OR_EQUAL=40, GREATER_OR_EQUAL=41, LOGICAL_OR=42, 
		LOGICAL_AND=43, LOGICAL_NOT=44, CONCAT=45, FLOAT_LITERAL=46, INT_LITERAL=47, 
		ID=48, LSB=49, RSB=50, LP=51, RP=52, LB=53, RB=54, SEMICOLON=55, COLON=56, 
		DOT=57, COMMA=58, ASSIGN=59;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"CONST_DECL", "STRING_LITERAL", "UNCLOSE_STRING", "LINE_CMT", "BLOCK_CMT", 
		"WS", "BOOL", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", "FALSE", 
		"FINAL", "FLOAT", "IF", "INTEGER", "NEW", "NULL", "RETURN", "SELF", "STATIC", 
		"STRING", "THEN", "TRUE", "VOID", "WHILE", "IO", "ADD", "SUB", "MUL", 
		"FLOAT_DIV", "INT_DIV", "MOD", "DIFF", "EQUAL", "LESS", "GREATER", "LESS_OR_EQUAL", 
		"GREATER_OR_EQUAL", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "CONCAT", 
		"FLOAT_LITERAL", "INT_LITERAL", "ID", "LSB", "RSB", "LP", "RP", "LB", 
		"RB", "SEMICOLON", "COLON", "DOT", "COMMA", "ASSIGN"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'='", null, null, null, null, null, "'bool'", "'break'", "'class'", 
		"'continue'", "'do'", "'else'", "'extends'", "'false'", "'final'", "'float'", 
		"'if'", "'integer'", "'new'", "'null'", "'return'", "'self'", "'static'", 
		"'string'", "'then'", "'true'", "'void'", "'while'", "'io'", "'+'", "'-'", 
		"'*'", "'/'", "'\\'", "'%'", "'<>'", "'=='", "'<'", "'>'", "'<='", "'>='", 
		"'||'", "'&&'", "'!'", "'^'", null, null, null, "'['", "']'", "'{'", "'}'", 
		"'('", "')'", "';'", "':'", "'.'", "','", "':='"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "CONST_DECL", "STRING_LITERAL", "UNCLOSE_STRING", "LINE_CMT", "BLOCK_CMT", 
		"WS", "BOOL", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", "FALSE", 
		"FINAL", "FLOAT", "IF", "INTEGER", "NEW", "NULL", "RETURN", "SELF", "STATIC", 
		"STRING", "THEN", "TRUE", "VOID", "WHILE", "IO", "ADD", "SUB", "MUL", 
		"FLOAT_DIV", "INT_DIV", "MOD", "DIFF", "EQUAL", "LESS", "GREATER", "LESS_OR_EQUAL", 
		"GREATER_OR_EQUAL", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "CONCAT", 
		"FLOAT_LITERAL", "INT_LITERAL", "ID", "LSB", "RSB", "LP", "RP", "LB", 
		"RB", "SEMICOLON", "COLON", "DOT", "COMMA", "ASSIGN"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public BKOOLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "BKOOL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 2:
			UNCLOSE_STRING_action((RuleContext)_localctx, actionIndex);
			break;
		}
	}
	private void UNCLOSE_STRING_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:
			System.out.print("There is an unclosed string.\n");
			break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2=\u019d\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\3\2\3"+
		"\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u008a\n"+
		"\3\f\3\16\3\u008d\13\3\3\3\3\3\3\3\3\3\5\3\u0093\n\3\3\4\3\4\6\4\u0097"+
		"\n\4\r\4\16\4\u0098\3\4\5\4\u009c\n\4\3\4\3\4\3\5\3\5\6\5\u00a2\n\5\r"+
		"\5\16\5\u00a3\3\5\5\5\u00a7\n\5\3\5\3\5\3\6\3\6\3\6\3\6\6\6\u00af\n\6"+
		"\r\6\16\6\u00b0\3\6\3\6\3\6\3\6\3\6\3\7\6\7\u00b9\n\7\r\7\16\7\u00ba\3"+
		"\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n"+
		"\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r"+
		"\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3"+
		"\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3"+
		"\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3"+
		"\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3"+
		"\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3"+
		"\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3"+
		"\'\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3.\3.\3/\6/\u0168\n"+
		"/\r/\16/\u0169\3/\3/\6/\u016e\n/\r/\16/\u016f\5/\u0172\n/\3/\3/\3/\6/"+
		"\u0177\n/\r/\16/\u0178\3\60\6\60\u017c\n\60\r\60\16\60\u017d\3\61\3\61"+
		"\7\61\u0182\n\61\f\61\16\61\u0185\13\61\3\62\3\62\3\63\3\63\3\64\3\64"+
		"\3\65\3\65\3\66\3\66\3\67\3\67\38\38\39\39\3:\3:\3;\3;\3<\3<\3<\6\u008b"+
		"\u0098\u00a3\u00b0\2=\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27"+
		"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33"+
		"\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63"+
		"e\64g\65i\66k\67m8o9q:s;u<w=\3\2\t\3\3\f\f\5\2\13\f\16\17\"\"\3\2\62;"+
		"\5\2GGgg~~\5\2--//~~\5\2C\\aac|\6\2\62;C\\aac|\u01ae\2\3\3\2\2\2\2\5\3"+
		"\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2"+
		"\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3"+
		"\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'"+
		"\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63"+
		"\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2"+
		"?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3"+
		"\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2"+
		"\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2"+
		"e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3"+
		"\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\3y\3\2\2\2\5{\3\2\2\2\7\u0094"+
		"\3\2\2\2\t\u009f\3\2\2\2\13\u00aa\3\2\2\2\r\u00b8\3\2\2\2\17\u00be\3\2"+
		"\2\2\21\u00c3\3\2\2\2\23\u00c9\3\2\2\2\25\u00cf\3\2\2\2\27\u00d8\3\2\2"+
		"\2\31\u00db\3\2\2\2\33\u00e0\3\2\2\2\35\u00e8\3\2\2\2\37\u00ee\3\2\2\2"+
		"!\u00f4\3\2\2\2#\u00fa\3\2\2\2%\u00fd\3\2\2\2\'\u0105\3\2\2\2)\u0109\3"+
		"\2\2\2+\u010e\3\2\2\2-\u0115\3\2\2\2/\u011a\3\2\2\2\61\u0121\3\2\2\2\63"+
		"\u0128\3\2\2\2\65\u012d\3\2\2\2\67\u0132\3\2\2\29\u0137\3\2\2\2;\u013d"+
		"\3\2\2\2=\u0140\3\2\2\2?\u0142\3\2\2\2A\u0144\3\2\2\2C\u0146\3\2\2\2E"+
		"\u0148\3\2\2\2G\u014a\3\2\2\2I\u014c\3\2\2\2K\u014f\3\2\2\2M\u0152\3\2"+
		"\2\2O\u0154\3\2\2\2Q\u0156\3\2\2\2S\u0159\3\2\2\2U\u015c\3\2\2\2W\u015f"+
		"\3\2\2\2Y\u0162\3\2\2\2[\u0164\3\2\2\2]\u0167\3\2\2\2_\u017b\3\2\2\2a"+
		"\u017f\3\2\2\2c\u0186\3\2\2\2e\u0188\3\2\2\2g\u018a\3\2\2\2i\u018c\3\2"+
		"\2\2k\u018e\3\2\2\2m\u0190\3\2\2\2o\u0192\3\2\2\2q\u0194\3\2\2\2s\u0196"+
		"\3\2\2\2u\u0198\3\2\2\2w\u019a\3\2\2\2yz\7?\2\2z\4\3\2\2\2{\u008b\7$\2"+
		"\2|}\7^\2\2}\u008a\7d\2\2~\177\7^\2\2\177\u008a\7v\2\2\u0080\u0081\7^"+
		"\2\2\u0081\u008a\7t\2\2\u0082\u0083\7^\2\2\u0083\u008a\7h\2\2\u0084\u0085"+
		"\7^\2\2\u0085\u008a\7^\2\2\u0086\u0087\7^\2\2\u0087\u008a\7$\2\2\u0088"+
		"\u008a\13\2\2\2\u0089|\3\2\2\2\u0089~\3\2\2\2\u0089\u0080\3\2\2\2\u0089"+
		"\u0082\3\2\2\2\u0089\u0084\3\2\2\2\u0089\u0086\3\2\2\2\u0089\u0088\3\2"+
		"\2\2\u008a\u008d\3\2\2\2\u008b\u008c\3\2\2\2\u008b\u0089\3\2\2\2\u008c"+
		"\u008e\3\2\2\2\u008d\u008b\3\2\2\2\u008e\u0092\7$\2\2\u008f\u0090\7^\2"+
		"\2\u0090\u0093\7p\2\2\u0091\u0093\7\2\2\3\u0092\u008f\3\2\2\2\u0092\u0091"+
		"\3\2\2\2\u0093\6\3\2\2\2\u0094\u0096\7$\2\2\u0095\u0097\13\2\2\2\u0096"+
		"\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098\u0099\3\2\2\2\u0098\u0096\3\2"+
		"\2\2\u0099\u009b\3\2\2\2\u009a\u009c\t\2\2\2\u009b\u009a\3\2\2\2\u009c"+
		"\u009d\3\2\2\2\u009d\u009e\b\4\2\2\u009e\b\3\2\2\2\u009f\u00a1\7%\2\2"+
		"\u00a0\u00a2\13\2\2\2\u00a1\u00a0\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a4"+
		"\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4\u00a6\3\2\2\2\u00a5\u00a7\t\2\2\2\u00a6"+
		"\u00a5\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9\b\5\3\2\u00a9\n\3\2\2\2"+
		"\u00aa\u00ab\7*\2\2\u00ab\u00ac\7,\2\2\u00ac\u00ae\3\2\2\2\u00ad\u00af"+
		"\13\2\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\3\2\2\2"+
		"\u00b0\u00ae\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b3\7,\2\2\u00b3\u00b4"+
		"\7+\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00b6\b\6\3\2\u00b6\f\3\2\2\2\u00b7"+
		"\u00b9\t\3\2\2\u00b8\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00b8\3\2"+
		"\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00bd\b\7\3\2\u00bd"+
		"\16\3\2\2\2\u00be\u00bf\7d\2\2\u00bf\u00c0\7q\2\2\u00c0\u00c1\7q\2\2\u00c1"+
		"\u00c2\7n\2\2\u00c2\20\3\2\2\2\u00c3\u00c4\7d\2\2\u00c4\u00c5\7t\2\2\u00c5"+
		"\u00c6\7g\2\2\u00c6\u00c7\7c\2\2\u00c7\u00c8\7m\2\2\u00c8\22\3\2\2\2\u00c9"+
		"\u00ca\7e\2\2\u00ca\u00cb\7n\2\2\u00cb\u00cc\7c\2\2\u00cc\u00cd\7u\2\2"+
		"\u00cd\u00ce\7u\2\2\u00ce\24\3\2\2\2\u00cf\u00d0\7e\2\2\u00d0\u00d1\7"+
		"q\2\2\u00d1\u00d2\7p\2\2\u00d2\u00d3\7v\2\2\u00d3\u00d4\7k\2\2\u00d4\u00d5"+
		"\7p\2\2\u00d5\u00d6\7w\2\2\u00d6\u00d7\7g\2\2\u00d7\26\3\2\2\2\u00d8\u00d9"+
		"\7f\2\2\u00d9\u00da\7q\2\2\u00da\30\3\2\2\2\u00db\u00dc\7g\2\2\u00dc\u00dd"+
		"\7n\2\2\u00dd\u00de\7u\2\2\u00de\u00df\7g\2\2\u00df\32\3\2\2\2\u00e0\u00e1"+
		"\7g\2\2\u00e1\u00e2\7z\2\2\u00e2\u00e3\7v\2\2\u00e3\u00e4\7g\2\2\u00e4"+
		"\u00e5\7p\2\2\u00e5\u00e6\7f\2\2\u00e6\u00e7\7u\2\2\u00e7\34\3\2\2\2\u00e8"+
		"\u00e9\7h\2\2\u00e9\u00ea\7c\2\2\u00ea\u00eb\7n\2\2\u00eb\u00ec\7u\2\2"+
		"\u00ec\u00ed\7g\2\2\u00ed\36\3\2\2\2\u00ee\u00ef\7h\2\2\u00ef\u00f0\7"+
		"k\2\2\u00f0\u00f1\7p\2\2\u00f1\u00f2\7c\2\2\u00f2\u00f3\7n\2\2\u00f3 "+
		"\3\2\2\2\u00f4\u00f5\7h\2\2\u00f5\u00f6\7n\2\2\u00f6\u00f7\7q\2\2\u00f7"+
		"\u00f8\7c\2\2\u00f8\u00f9\7v\2\2\u00f9\"\3\2\2\2\u00fa\u00fb\7k\2\2\u00fb"+
		"\u00fc\7h\2\2\u00fc$\3\2\2\2\u00fd\u00fe\7k\2\2\u00fe\u00ff\7p\2\2\u00ff"+
		"\u0100\7v\2\2\u0100\u0101\7g\2\2\u0101\u0102\7i\2\2\u0102\u0103\7g\2\2"+
		"\u0103\u0104\7t\2\2\u0104&\3\2\2\2\u0105\u0106\7p\2\2\u0106\u0107\7g\2"+
		"\2\u0107\u0108\7y\2\2\u0108(\3\2\2\2\u0109\u010a\7p\2\2\u010a\u010b\7"+
		"w\2\2\u010b\u010c\7n\2\2\u010c\u010d\7n\2\2\u010d*\3\2\2\2\u010e\u010f"+
		"\7t\2\2\u010f\u0110\7g\2\2\u0110\u0111\7v\2\2\u0111\u0112\7w\2\2\u0112"+
		"\u0113\7t\2\2\u0113\u0114\7p\2\2\u0114,\3\2\2\2\u0115\u0116\7u\2\2\u0116"+
		"\u0117\7g\2\2\u0117\u0118\7n\2\2\u0118\u0119\7h\2\2\u0119.\3\2\2\2\u011a"+
		"\u011b\7u\2\2\u011b\u011c\7v\2\2\u011c\u011d\7c\2\2\u011d\u011e\7v\2\2"+
		"\u011e\u011f\7k\2\2\u011f\u0120\7e\2\2\u0120\60\3\2\2\2\u0121\u0122\7"+
		"u\2\2\u0122\u0123\7v\2\2\u0123\u0124\7t\2\2\u0124\u0125\7k\2\2\u0125\u0126"+
		"\7p\2\2\u0126\u0127\7i\2\2\u0127\62\3\2\2\2\u0128\u0129\7v\2\2\u0129\u012a"+
		"\7j\2\2\u012a\u012b\7g\2\2\u012b\u012c\7p\2\2\u012c\64\3\2\2\2\u012d\u012e"+
		"\7v\2\2\u012e\u012f\7t\2\2\u012f\u0130\7w\2\2\u0130\u0131\7g\2\2\u0131"+
		"\66\3\2\2\2\u0132\u0133\7x\2\2\u0133\u0134\7q\2\2\u0134\u0135\7k\2\2\u0135"+
		"\u0136\7f\2\2\u01368\3\2\2\2\u0137\u0138\7y\2\2\u0138\u0139\7j\2\2\u0139"+
		"\u013a\7k\2\2\u013a\u013b\7n\2\2\u013b\u013c\7g\2\2\u013c:\3\2\2\2\u013d"+
		"\u013e\7k\2\2\u013e\u013f\7q\2\2\u013f<\3\2\2\2\u0140\u0141\7-\2\2\u0141"+
		">\3\2\2\2\u0142\u0143\7/\2\2\u0143@\3\2\2\2\u0144\u0145\7,\2\2\u0145B"+
		"\3\2\2\2\u0146\u0147\7\61\2\2\u0147D\3\2\2\2\u0148\u0149\7^\2\2\u0149"+
		"F\3\2\2\2\u014a\u014b\7\'\2\2\u014bH\3\2\2\2\u014c\u014d\7>\2\2\u014d"+
		"\u014e\7@\2\2\u014eJ\3\2\2\2\u014f\u0150\7?\2\2\u0150\u0151\7?\2\2\u0151"+
		"L\3\2\2\2\u0152\u0153\7>\2\2\u0153N\3\2\2\2\u0154\u0155\7@\2\2\u0155P"+
		"\3\2\2\2\u0156\u0157\7>\2\2\u0157\u0158\7?\2\2\u0158R\3\2\2\2\u0159\u015a"+
		"\7@\2\2\u015a\u015b\7?\2\2\u015bT\3\2\2\2\u015c\u015d\7~\2\2\u015d\u015e"+
		"\7~\2\2\u015eV\3\2\2\2\u015f\u0160\7(\2\2\u0160\u0161\7(\2\2\u0161X\3"+
		"\2\2\2\u0162\u0163\7#\2\2\u0163Z\3\2\2\2\u0164\u0165\7`\2\2\u0165\\\3"+
		"\2\2\2\u0166\u0168\t\4\2\2\u0167\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169"+
		"\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u0171\3\2\2\2\u016b\u016d\7\60"+
		"\2\2\u016c\u016e\t\4\2\2\u016d\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f"+
		"\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172\3\2\2\2\u0171\u016b\3\2"+
		"\2\2\u0171\u0172\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174\t\5\2\2\u0174"+
		"\u0176\t\6\2\2\u0175\u0177\t\4\2\2\u0176\u0175\3\2\2\2\u0177\u0178\3\2"+
		"\2\2\u0178\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179^\3\2\2\2\u017a\u017c"+
		"\t\4\2\2\u017b\u017a\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017b\3\2\2\2\u017d"+
		"\u017e\3\2\2\2\u017e`\3\2\2\2\u017f\u0183\t\7\2\2\u0180\u0182\t\b\2\2"+
		"\u0181\u0180\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184"+
		"\3\2\2\2\u0184b\3\2\2\2\u0185\u0183\3\2\2\2\u0186\u0187\7]\2\2\u0187d"+
		"\3\2\2\2\u0188\u0189\7_\2\2\u0189f\3\2\2\2\u018a\u018b\7}\2\2\u018bh\3"+
		"\2\2\2\u018c\u018d\7\177\2\2\u018dj\3\2\2\2\u018e\u018f\7*\2\2\u018fl"+
		"\3\2\2\2\u0190\u0191\7+\2\2\u0191n\3\2\2\2\u0192\u0193\7=\2\2\u0193p\3"+
		"\2\2\2\u0194\u0195\7<\2\2\u0195r\3\2\2\2\u0196\u0197\7\60\2\2\u0197t\3"+
		"\2\2\2\u0198\u0199\7.\2\2\u0199v\3\2\2\2\u019a\u019b\7<\2\2\u019b\u019c"+
		"\7?\2\2\u019cx\3\2\2\2\22\2\u0089\u008b\u0092\u0098\u009b\u00a3\u00a6"+
		"\u00b0\u00ba\u0169\u016f\u0171\u0178\u017d\u0183\4\3\4\2\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}