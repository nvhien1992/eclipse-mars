// Generated from BKOOL.g4 by ANTLR 4.5

	package antlr4.bkool.parser;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BKOOLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CONST_DECL=1, STRING_LITERAL=2, UNCLOSE_STRING=3, LINE_CMT=4, BLOCK_CMT=5, 
		WS=6, BOOL=7, BREAK=8, CLASS=9, CONTINUE=10, DO=11, ELSE=12, EXTENDS=13, 
		FALSE=14, FINAL=15, FLOAT=16, IF=17, INTEGER=18, NEW=19, NULL=20, RETURN=21, 
		SELF=22, STATIC=23, STRING=24, THEN=25, TRUE=26, VOID=27, WHILE=28, IO_RD_INT=29, 
		IO_WR_INT=30, IO_WR_INT_LN=31, IO_RD_FLOAT=32, IO_WR_FLOAT=33, IO_WR_FLOAT_LN=34, 
		IO_RD_BOOL=35, IO_WR_BOOL=36, IO_WR_BOOL_LN=37, IO_RD_STR=38, IO_WR_STR=39, 
		IO_WR_STR_LN=40, IO=41, ADD=42, SUB=43, MUL=44, FLOAT_DIV=45, INT_DIV=46, 
		MOD=47, DIFF=48, EQUAL=49, LESS=50, GREATER=51, LESS_OR_EQUAL=52, GREATER_OR_EQUAL=53, 
		LOGICAL_OR=54, LOGICAL_AND=55, LOGICAL_NOT=56, CONCAT=57, INT_LITERAL=58, 
		FLOAT_LITERAL=59, ID=60, LSB=61, RSB=62, LP=63, RP=64, LB=65, RB=66, SEMICOLON=67, 
		COLON=68, DOT=69, COMMA=70, ASSIGN=71;
	public static final int
		RULE_program = 0, RULE_class_decl = 1, RULE_list_members = 2, RULE_constuctor = 3, 
		RULE_attribute = 4, RULE_method_decl = 5, RULE_list_params = 6, RULE_const_decl = 7, 
		RULE_const_decl_rhs = 8, RULE_var_decl = 9, RULE_var_list = 10, RULE_var_list_type = 11, 
		RULE_primitive_type = 12, RULE_non_void_type = 13, RULE_class_type = 14, 
		RULE_array_type = 15, RULE_block_statement = 16, RULE_if_then_statement = 17, 
		RULE_then_else_statement = 18, RULE_while_statement = 19, RULE_do_statement = 20, 
		RULE_method_call_stmt = 21, RULE_single_statement = 22, RULE_io_statement = 23, 
		RULE_assign_statement = 24, RULE_assign_lhs = 25, RULE_assign_rhs = 26, 
		RULE_break_statement = 27, RULE_continue_statement = 28, RULE_return_statement = 29, 
		RULE_obj_creattion = 30, RULE_obj_params = 31, RULE_list_expr = 32, RULE_index_expr = 33, 
		RULE_name_index_expr = 34, RULE_index = 35, RULE_int_const_expr = 36, 
		RULE_float_const_expr = 37, RULE_string_expr = 38, RULE_string_const_expr = 39, 
		RULE_logical_expr = 40, RULE_comparison_expr = 41, RULE_comparison_operand = 42, 
		RULE_comp_operator = 43, RULE_arithmetic_expr = 44, RULE_arithmetic_operator = 45, 
		RULE_int_arithmetic_operator = 46, RULE_float_arithmetic_operator = 47, 
		RULE_attr_access = 48, RULE_method_access = 49, RULE_other_method_access = 50, 
		RULE_method_params = 51, RULE_list_method_params = 52, RULE_logical_literal = 53, 
		RULE_numeric_literal = 54, RULE_io_rd_stmt = 55, RULE_io_wr_int_stmt = 56, 
		RULE_io_wr_float_stmt = 57, RULE_io_wr_bool_stmt = 58, RULE_io_wr_str_stmt = 59;
	public static final String[] ruleNames = {
		"program", "class_decl", "list_members", "constuctor", "attribute", "method_decl", 
		"list_params", "const_decl", "const_decl_rhs", "var_decl", "var_list", 
		"var_list_type", "primitive_type", "non_void_type", "class_type", "array_type", 
		"block_statement", "if_then_statement", "then_else_statement", "while_statement", 
		"do_statement", "method_call_stmt", "single_statement", "io_statement", 
		"assign_statement", "assign_lhs", "assign_rhs", "break_statement", "continue_statement", 
		"return_statement", "obj_creattion", "obj_params", "list_expr", "index_expr", 
		"name_index_expr", "index", "int_const_expr", "float_const_expr", "string_expr", 
		"string_const_expr", "logical_expr", "comparison_expr", "comparison_operand", 
		"comp_operator", "arithmetic_expr", "arithmetic_operator", "int_arithmetic_operator", 
		"float_arithmetic_operator", "attr_access", "method_access", "other_method_access", 
		"method_params", "list_method_params", "logical_literal", "numeric_literal", 
		"io_rd_stmt", "io_wr_int_stmt", "io_wr_float_stmt", "io_wr_bool_stmt", 
		"io_wr_str_stmt"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'='", null, "'\"'", null, null, null, "'bool'", "'break'", "'class'", 
		"'continue'", "'do'", "'else'", "'extends'", "'false'", "'final'", "'float'", 
		"'if'", "'integer'", "'new'", "'null'", "'return'", "'self'", "'static'", 
		"'string'", "'then'", "'true'", "'void'", "'while'", "'io.readInt'", "'io.writeInt'", 
		"'io.writeIntLn'", "'io.readFloat'", "'io.writeFloat'", "'io.writeFloatLn'", 
		"'io.readBool'", "'io.writeBool'", "'io.writeBoolLn'", "'io.readStr'", 
		"'io.writeStr'", "'io.writeStrLn'", "'io'", "'+'", "'-'", "'*'", "'/'", 
		"'\\'", "'%'", "'<>'", "'=='", "'<'", "'>'", "'<='", "'>='", "'||'", "'&&'", 
		"'!'", "'^'", null, null, null, "'['", "']'", "'{'", "'}'", "'('", "')'", 
		"';'", "':'", "'.'", "','", "':='"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "CONST_DECL", "STRING_LITERAL", "UNCLOSE_STRING", "LINE_CMT", "BLOCK_CMT", 
		"WS", "BOOL", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", "FALSE", 
		"FINAL", "FLOAT", "IF", "INTEGER", "NEW", "NULL", "RETURN", "SELF", "STATIC", 
		"STRING", "THEN", "TRUE", "VOID", "WHILE", "IO_RD_INT", "IO_WR_INT", "IO_WR_INT_LN", 
		"IO_RD_FLOAT", "IO_WR_FLOAT", "IO_WR_FLOAT_LN", "IO_RD_BOOL", "IO_WR_BOOL", 
		"IO_WR_BOOL_LN", "IO_RD_STR", "IO_WR_STR", "IO_WR_STR_LN", "IO", "ADD", 
		"SUB", "MUL", "FLOAT_DIV", "INT_DIV", "MOD", "DIFF", "EQUAL", "LESS", 
		"GREATER", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "LOGICAL_OR", "LOGICAL_AND", 
		"LOGICAL_NOT", "CONCAT", "INT_LITERAL", "FLOAT_LITERAL", "ID", "LSB", 
		"RSB", "LP", "RP", "LB", "RB", "SEMICOLON", "COLON", "DOT", "COMMA", "ASSIGN"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "BKOOL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public BKOOLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgramContext extends ParserRuleContext {
		public List<Class_declContext> class_decl() {
			return getRuleContexts(Class_declContext.class);
		}
		public Class_declContext class_decl(int i) {
			return getRuleContext(Class_declContext.class,i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitProgram(this);
		}
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(121); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(120);
				class_decl();
				}
				}
				setState(123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CLASS );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_declContext extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(BKOOLParser.CLASS, 0); }
		public List<TerminalNode> ID() { return getTokens(BKOOLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(BKOOLParser.ID, i);
		}
		public TerminalNode LP() { return getToken(BKOOLParser.LP, 0); }
		public List_membersContext list_members() {
			return getRuleContext(List_membersContext.class,0);
		}
		public TerminalNode RP() { return getToken(BKOOLParser.RP, 0); }
		public TerminalNode EXTENDS() { return getToken(BKOOLParser.EXTENDS, 0); }
		public Class_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterClass_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitClass_decl(this);
		}
	}

	public final Class_declContext class_decl() throws RecognitionException {
		Class_declContext _localctx = new Class_declContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_class_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(125);
			match(CLASS);
			setState(126);
			match(ID);
			setState(129);
			_la = _input.LA(1);
			if (_la==EXTENDS) {
				{
				setState(127);
				match(EXTENDS);
				setState(128);
				match(ID);
				}
			}

			setState(131);
			match(LP);
			setState(132);
			list_members();
			setState(133);
			match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_membersContext extends ParserRuleContext {
		public List<ConstuctorContext> constuctor() {
			return getRuleContexts(ConstuctorContext.class);
		}
		public ConstuctorContext constuctor(int i) {
			return getRuleContext(ConstuctorContext.class,i);
		}
		public List<AttributeContext> attribute() {
			return getRuleContexts(AttributeContext.class);
		}
		public AttributeContext attribute(int i) {
			return getRuleContext(AttributeContext.class,i);
		}
		public List<Method_declContext> method_decl() {
			return getRuleContexts(Method_declContext.class);
		}
		public Method_declContext method_decl(int i) {
			return getRuleContext(Method_declContext.class,i);
		}
		public List_membersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_members; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterList_members(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitList_members(this);
		}
	}

	public final List_membersContext list_members() throws RecognitionException {
		List_membersContext _localctx = new List_membersContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_list_members);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << FINAL) | (1L << FLOAT) | (1L << INTEGER) | (1L << STATIC) | (1L << STRING) | (1L << VOID) | (1L << ID))) != 0)) {
				{
				setState(138);
				switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					setState(135);
					constuctor();
					}
					break;
				case 2:
					{
					setState(136);
					attribute();
					}
					break;
				case 3:
					{
					setState(137);
					method_decl();
					}
					break;
				}
				}
				setState(142);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstuctorContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public List_paramsContext list_params() {
			return getRuleContext(List_paramsContext.class,0);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public ConstuctorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constuctor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterConstuctor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitConstuctor(this);
		}
	}

	public final ConstuctorContext constuctor() throws RecognitionException {
		ConstuctorContext _localctx = new ConstuctorContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_constuctor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(143);
			match(ID);
			setState(144);
			match(LB);
			setState(145);
			list_params();
			setState(146);
			match(RB);
			setState(147);
			block_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeContext extends ParserRuleContext {
		public Const_declContext const_decl() {
			return getRuleContext(Const_declContext.class,0);
		}
		public Var_declContext var_decl() {
			return getRuleContext(Var_declContext.class,0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitAttribute(this);
		}
	}

	public final AttributeContext attribute() throws RecognitionException {
		AttributeContext _localctx = new AttributeContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_attribute);
		try {
			setState(151);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(149);
				const_decl();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(150);
				var_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_declContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Primitive_typeContext primitive_type() {
			return getRuleContext(Primitive_typeContext.class,0);
		}
		public Array_typeContext array_type() {
			return getRuleContext(Array_typeContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public TerminalNode STATIC() { return getToken(BKOOLParser.STATIC, 0); }
		public List_paramsContext list_params() {
			return getRuleContext(List_paramsContext.class,0);
		}
		public Method_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterMethod_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitMethod_decl(this);
		}
	}

	public final Method_declContext method_decl() throws RecognitionException {
		Method_declContext _localctx = new Method_declContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_method_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(156);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(153);
				primitive_type();
				}
				break;
			case 2:
				{
				setState(154);
				array_type();
				}
				break;
			case 3:
				{
				setState(155);
				class_type();
				}
				break;
			}
			setState(159);
			_la = _input.LA(1);
			if (_la==STATIC) {
				{
				setState(158);
				match(STATIC);
				}
			}

			setState(161);
			match(ID);
			setState(162);
			match(LB);
			setState(164);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(163);
				list_params();
				}
			}

			setState(166);
			match(RB);
			setState(167);
			block_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_paramsContext extends ParserRuleContext {
		public List<Var_listContext> var_list() {
			return getRuleContexts(Var_listContext.class);
		}
		public Var_listContext var_list(int i) {
			return getRuleContext(Var_listContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(BKOOLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(BKOOLParser.SEMICOLON, i);
		}
		public List_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterList_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitList_params(this);
		}
	}

	public final List_paramsContext list_params() throws RecognitionException {
		List_paramsContext _localctx = new List_paramsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_list_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(169);
			var_list();
			setState(174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(170);
				match(SEMICOLON);
				setState(171);
				var_list();
				}
				}
				setState(176);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Const_declContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(BKOOLParser.FINAL, 0); }
		public Non_void_typeContext non_void_type() {
			return getRuleContext(Non_void_typeContext.class,0);
		}
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public TerminalNode CONST_DECL() { return getToken(BKOOLParser.CONST_DECL, 0); }
		public Const_decl_rhsContext const_decl_rhs() {
			return getRuleContext(Const_decl_rhsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode STATIC() { return getToken(BKOOLParser.STATIC, 0); }
		public Const_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_const_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterConst_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitConst_decl(this);
		}
	}

	public final Const_declContext const_decl() throws RecognitionException {
		Const_declContext _localctx = new Const_declContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_const_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(178);
			_la = _input.LA(1);
			if (_la==STATIC) {
				{
				setState(177);
				match(STATIC);
				}
			}

			setState(180);
			match(FINAL);
			setState(181);
			non_void_type();
			setState(182);
			match(ID);
			setState(183);
			match(CONST_DECL);
			setState(184);
			const_decl_rhs();
			setState(185);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Const_decl_rhsContext extends ParserRuleContext {
		public Logical_literalContext logical_literal() {
			return getRuleContext(Logical_literalContext.class,0);
		}
		public Numeric_literalContext numeric_literal() {
			return getRuleContext(Numeric_literalContext.class,0);
		}
		public Int_const_exprContext int_const_expr() {
			return getRuleContext(Int_const_exprContext.class,0);
		}
		public Float_const_exprContext float_const_expr() {
			return getRuleContext(Float_const_exprContext.class,0);
		}
		public String_const_exprContext string_const_expr() {
			return getRuleContext(String_const_exprContext.class,0);
		}
		public Const_decl_rhsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_const_decl_rhs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterConst_decl_rhs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitConst_decl_rhs(this);
		}
	}

	public final Const_decl_rhsContext const_decl_rhs() throws RecognitionException {
		Const_decl_rhsContext _localctx = new Const_decl_rhsContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_const_decl_rhs);
		try {
			setState(192);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(187);
				logical_literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(188);
				numeric_literal();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(189);
				int_const_expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(190);
				float_const_expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(191);
				string_const_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_declContext extends ParserRuleContext {
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode STATIC() { return getToken(BKOOLParser.STATIC, 0); }
		public Var_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterVar_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitVar_decl(this);
		}
	}

	public final Var_declContext var_decl() throws RecognitionException {
		Var_declContext _localctx = new Var_declContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_var_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(195);
			_la = _input.LA(1);
			if (_la==STATIC) {
				{
				setState(194);
				match(STATIC);
				}
			}

			setState(197);
			var_list();
			setState(198);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(BKOOLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(BKOOLParser.ID, i);
		}
		public TerminalNode COLON() { return getToken(BKOOLParser.COLON, 0); }
		public Var_list_typeContext var_list_type() {
			return getRuleContext(Var_list_typeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(BKOOLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(BKOOLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitVar_list(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		Var_listContext _localctx = new Var_listContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_var_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(200);
			match(ID);
			setState(205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(201);
				match(COMMA);
				setState(202);
				match(ID);
				}
				}
				setState(207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(208);
			match(COLON);
			setState(209);
			var_list_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_list_typeContext extends ParserRuleContext {
		public Array_typeContext array_type() {
			return getRuleContext(Array_typeContext.class,0);
		}
		public Non_void_typeContext non_void_type() {
			return getRuleContext(Non_void_typeContext.class,0);
		}
		public Var_list_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterVar_list_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitVar_list_type(this);
		}
	}

	public final Var_list_typeContext var_list_type() throws RecognitionException {
		Var_list_typeContext _localctx = new Var_list_typeContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_var_list_type);
		try {
			setState(213);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(211);
				array_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(212);
				non_void_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primitive_typeContext extends ParserRuleContext {
		public TerminalNode INTEGER() { return getToken(BKOOLParser.INTEGER, 0); }
		public TerminalNode FLOAT() { return getToken(BKOOLParser.FLOAT, 0); }
		public TerminalNode BOOL() { return getToken(BKOOLParser.BOOL, 0); }
		public TerminalNode STRING() { return getToken(BKOOLParser.STRING, 0); }
		public TerminalNode VOID() { return getToken(BKOOLParser.VOID, 0); }
		public Primitive_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterPrimitive_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitPrimitive_type(this);
		}
	}

	public final Primitive_typeContext primitive_type() throws RecognitionException {
		Primitive_typeContext _localctx = new Primitive_typeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_primitive_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(215);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << FLOAT) | (1L << INTEGER) | (1L << STRING) | (1L << VOID))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_void_typeContext extends ParserRuleContext {
		public TerminalNode INTEGER() { return getToken(BKOOLParser.INTEGER, 0); }
		public TerminalNode FLOAT() { return getToken(BKOOLParser.FLOAT, 0); }
		public TerminalNode BOOL() { return getToken(BKOOLParser.BOOL, 0); }
		public TerminalNode STRING() { return getToken(BKOOLParser.STRING, 0); }
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Non_void_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_void_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterNon_void_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitNon_void_type(this);
		}
	}

	public final Non_void_typeContext non_void_type() throws RecognitionException {
		Non_void_typeContext _localctx = new Non_void_typeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_non_void_type);
		try {
			setState(222);
			switch (_input.LA(1)) {
			case INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(217);
				match(INTEGER);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(218);
				match(FLOAT);
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(219);
				match(BOOL);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(220);
				match(STRING);
				}
				break;
			case ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(221);
				class_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitClass_type(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_class_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(224);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_typeContext extends ParserRuleContext {
		public Non_void_typeContext non_void_type() {
			return getRuleContext(Non_void_typeContext.class,0);
		}
		public TerminalNode LSB() { return getToken(BKOOLParser.LSB, 0); }
		public Int_const_exprContext int_const_expr() {
			return getRuleContext(Int_const_exprContext.class,0);
		}
		public TerminalNode RSB() { return getToken(BKOOLParser.RSB, 0); }
		public Array_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterArray_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitArray_type(this);
		}
	}

	public final Array_typeContext array_type() throws RecognitionException {
		Array_typeContext _localctx = new Array_typeContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_array_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(226);
			non_void_type();
			setState(227);
			match(LSB);
			setState(228);
			int_const_expr(0);
			setState(229);
			match(RSB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode LP() { return getToken(BKOOLParser.LP, 0); }
		public TerminalNode RP() { return getToken(BKOOLParser.RP, 0); }
		public List<Single_statementContext> single_statement() {
			return getRuleContexts(Single_statementContext.class);
		}
		public Single_statementContext single_statement(int i) {
			return getRuleContext(Single_statementContext.class,i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitBlock_statement(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_block_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(231);
			match(LP);
			setState(235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << SELF) | (1L << STATIC) | (1L << WHILE) | (1L << IO_RD_INT) | (1L << IO_WR_INT) | (1L << IO_WR_INT_LN) | (1L << IO_RD_FLOAT) | (1L << IO_WR_FLOAT) | (1L << IO_WR_FLOAT_LN) | (1L << IO_RD_BOOL) | (1L << IO_WR_BOOL) | (1L << IO_WR_BOOL_LN) | (1L << IO_RD_STR) | (1L << IO_WR_STR) | (1L << IO_WR_STR_LN) | (1L << ID))) != 0)) {
				{
				{
				setState(232);
				single_statement();
				}
				}
				setState(237);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(238);
			match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_then_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(BKOOLParser.IF, 0); }
		public Logical_exprContext logical_expr() {
			return getRuleContext(Logical_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(BKOOLParser.THEN, 0); }
		public List<Then_else_statementContext> then_else_statement() {
			return getRuleContexts(Then_else_statementContext.class);
		}
		public Then_else_statementContext then_else_statement(int i) {
			return getRuleContext(Then_else_statementContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(BKOOLParser.ELSE, 0); }
		public If_then_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_then_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIf_then_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIf_then_statement(this);
		}
	}

	public final If_then_statementContext if_then_statement() throws RecognitionException {
		If_then_statementContext _localctx = new If_then_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_if_then_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(240);
			match(IF);
			setState(241);
			logical_expr(0);
			setState(242);
			match(THEN);
			setState(243);
			then_else_statement();
			setState(246);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(244);
				match(ELSE);
				setState(245);
				then_else_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Then_else_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Single_statementContext single_statement() {
			return getRuleContext(Single_statementContext.class,0);
		}
		public Then_else_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_then_else_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterThen_else_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitThen_else_statement(this);
		}
	}

	public final Then_else_statementContext then_else_statement() throws RecognitionException {
		Then_else_statementContext _localctx = new Then_else_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_then_else_statement);
		try {
			setState(250);
			switch (_input.LA(1)) {
			case LP:
				enterOuterAlt(_localctx, 1);
				{
				setState(248);
				block_statement();
				}
				break;
			case BREAK:
			case CONTINUE:
			case IF:
			case RETURN:
			case SELF:
			case STATIC:
			case WHILE:
			case IO_RD_INT:
			case IO_WR_INT:
			case IO_WR_INT_LN:
			case IO_RD_FLOAT:
			case IO_WR_FLOAT:
			case IO_WR_FLOAT_LN:
			case IO_RD_BOOL:
			case IO_WR_BOOL:
			case IO_WR_BOOL_LN:
			case IO_RD_STR:
			case IO_WR_STR:
			case IO_WR_STR_LN:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(249);
				single_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(BKOOLParser.WHILE, 0); }
		public Logical_exprContext logical_expr() {
			return getRuleContext(Logical_exprContext.class,0);
		}
		public TerminalNode DO() { return getToken(BKOOLParser.DO, 0); }
		public Do_statementContext do_statement() {
			return getRuleContext(Do_statementContext.class,0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitWhile_statement(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(252);
			match(WHILE);
			setState(253);
			logical_expr(0);
			setState(254);
			match(DO);
			setState(255);
			do_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Do_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Single_statementContext single_statement() {
			return getRuleContext(Single_statementContext.class,0);
		}
		public Do_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_do_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterDo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitDo_statement(this);
		}
	}

	public final Do_statementContext do_statement() throws RecognitionException {
		Do_statementContext _localctx = new Do_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_do_statement);
		try {
			setState(259);
			switch (_input.LA(1)) {
			case LP:
				enterOuterAlt(_localctx, 1);
				{
				setState(257);
				block_statement();
				}
				break;
			case BREAK:
			case CONTINUE:
			case IF:
			case RETURN:
			case SELF:
			case STATIC:
			case WHILE:
			case IO_RD_INT:
			case IO_WR_INT:
			case IO_WR_INT_LN:
			case IO_RD_FLOAT:
			case IO_WR_FLOAT:
			case IO_WR_FLOAT_LN:
			case IO_RD_BOOL:
			case IO_WR_BOOL:
			case IO_WR_BOOL_LN:
			case IO_RD_STR:
			case IO_WR_STR:
			case IO_WR_STR_LN:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(258);
				single_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_call_stmtContext extends ParserRuleContext {
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public Method_call_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_call_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterMethod_call_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitMethod_call_stmt(this);
		}
	}

	public final Method_call_stmtContext method_call_stmt() throws RecognitionException {
		Method_call_stmtContext _localctx = new Method_call_stmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_method_call_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(261);
			method_access();
			setState(262);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_statementContext extends ParserRuleContext {
		public Assign_statementContext assign_statement() {
			return getRuleContext(Assign_statementContext.class,0);
		}
		public Var_declContext var_decl() {
			return getRuleContext(Var_declContext.class,0);
		}
		public Method_call_stmtContext method_call_stmt() {
			return getRuleContext(Method_call_stmtContext.class,0);
		}
		public If_then_statementContext if_then_statement() {
			return getRuleContext(If_then_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Io_statementContext io_statement() {
			return getRuleContext(Io_statementContext.class,0);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterSingle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitSingle_statement(this);
		}
	}

	public final Single_statementContext single_statement() throws RecognitionException {
		Single_statementContext _localctx = new Single_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_single_statement);
		try {
			setState(273);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(264);
				assign_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(265);
				var_decl();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(266);
				method_call_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(267);
				if_then_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(268);
				while_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(269);
				continue_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(270);
				break_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(271);
				return_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(272);
				io_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Io_statementContext extends ParserRuleContext {
		public Io_rd_stmtContext io_rd_stmt() {
			return getRuleContext(Io_rd_stmtContext.class,0);
		}
		public Io_wr_int_stmtContext io_wr_int_stmt() {
			return getRuleContext(Io_wr_int_stmtContext.class,0);
		}
		public Io_wr_float_stmtContext io_wr_float_stmt() {
			return getRuleContext(Io_wr_float_stmtContext.class,0);
		}
		public Io_wr_bool_stmtContext io_wr_bool_stmt() {
			return getRuleContext(Io_wr_bool_stmtContext.class,0);
		}
		public Io_wr_str_stmtContext io_wr_str_stmt() {
			return getRuleContext(Io_wr_str_stmtContext.class,0);
		}
		public Io_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_io_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIo_statement(this);
		}
	}

	public final Io_statementContext io_statement() throws RecognitionException {
		Io_statementContext _localctx = new Io_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_io_statement);
		try {
			setState(280);
			switch (_input.LA(1)) {
			case IO_RD_INT:
			case IO_RD_FLOAT:
			case IO_RD_BOOL:
			case IO_RD_STR:
				enterOuterAlt(_localctx, 1);
				{
				setState(275);
				io_rd_stmt();
				}
				break;
			case IO_WR_INT:
			case IO_WR_INT_LN:
				enterOuterAlt(_localctx, 2);
				{
				setState(276);
				io_wr_int_stmt();
				}
				break;
			case IO_WR_FLOAT:
			case IO_WR_FLOAT_LN:
				enterOuterAlt(_localctx, 3);
				{
				setState(277);
				io_wr_float_stmt();
				}
				break;
			case IO_WR_BOOL:
			case IO_WR_BOOL_LN:
				enterOuterAlt(_localctx, 4);
				{
				setState(278);
				io_wr_bool_stmt();
				}
				break;
			case IO_WR_STR:
			case IO_WR_STR_LN:
				enterOuterAlt(_localctx, 5);
				{
				setState(279);
				io_wr_str_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_statementContext extends ParserRuleContext {
		public Assign_lhsContext assign_lhs() {
			return getRuleContext(Assign_lhsContext.class,0);
		}
		public TerminalNode ASSIGN() { return getToken(BKOOLParser.ASSIGN, 0); }
		public Assign_rhsContext assign_rhs() {
			return getRuleContext(Assign_rhsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public Assign_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterAssign_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitAssign_statement(this);
		}
	}

	public final Assign_statementContext assign_statement() throws RecognitionException {
		Assign_statementContext _localctx = new Assign_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_assign_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(282);
			assign_lhs();
			setState(283);
			match(ASSIGN);
			setState(284);
			assign_rhs();
			setState(285);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_lhsContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public Index_exprContext index_expr() {
			return getRuleContext(Index_exprContext.class,0);
		}
		public Assign_lhsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_lhs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterAssign_lhs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitAssign_lhs(this);
		}
	}

	public final Assign_lhsContext assign_lhs() throws RecognitionException {
		Assign_lhsContext _localctx = new Assign_lhsContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_assign_lhs);
		try {
			setState(289);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(287);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(288);
				index_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_rhsContext extends ParserRuleContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return getRuleContext(Arithmetic_exprContext.class,0);
		}
		public Logical_exprContext logical_expr() {
			return getRuleContext(Logical_exprContext.class,0);
		}
		public Obj_creattionContext obj_creattion() {
			return getRuleContext(Obj_creattionContext.class,0);
		}
		public Logical_literalContext logical_literal() {
			return getRuleContext(Logical_literalContext.class,0);
		}
		public Numeric_literalContext numeric_literal() {
			return getRuleContext(Numeric_literalContext.class,0);
		}
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public Assign_rhsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_rhs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterAssign_rhs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitAssign_rhs(this);
		}
	}

	public final Assign_rhsContext assign_rhs() throws RecognitionException {
		Assign_rhsContext _localctx = new Assign_rhsContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_assign_rhs);
		try {
			setState(297);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(291);
				arithmetic_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(292);
				logical_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(293);
				obj_creattion();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(294);
				logical_literal();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(295);
				numeric_literal();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(296);
				match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(BKOOLParser.BREAK, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitBreak_statement(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(299);
			match(BREAK);
			setState(300);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(BKOOLParser.CONTINUE, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(302);
			match(CONTINUE);
			setState(303);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(BKOOLParser.RETURN, 0); }
		public List_exprContext list_expr() {
			return getRuleContext(List_exprContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(305);
			match(RETURN);
			setState(306);
			list_expr();
			setState(307);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Obj_creattionContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(BKOOLParser.NEW, 0); }
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Obj_paramsContext obj_params() {
			return getRuleContext(Obj_paramsContext.class,0);
		}
		public Obj_creattionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_obj_creattion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterObj_creattion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitObj_creattion(this);
		}
	}

	public final Obj_creattionContext obj_creattion() throws RecognitionException {
		Obj_creattionContext _localctx = new Obj_creattionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_obj_creattion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(309);
			match(NEW);
			setState(310);
			match(ID);
			setState(311);
			match(LB);
			setState(313);
			_la = _input.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (STRING_LITERAL - 2)) | (1L << (FALSE - 2)) | (1L << (NEW - 2)) | (1L << (SELF - 2)) | (1L << (TRUE - 2)) | (1L << (SUB - 2)) | (1L << (LOGICAL_NOT - 2)) | (1L << (INT_LITERAL - 2)) | (1L << (FLOAT_LITERAL - 2)) | (1L << (ID - 2)) | (1L << (LB - 2)))) != 0)) {
				{
				setState(312);
				obj_params();
				}
			}

			setState(315);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Obj_paramsContext extends ParserRuleContext {
		public List<List_exprContext> list_expr() {
			return getRuleContexts(List_exprContext.class);
		}
		public List_exprContext list_expr(int i) {
			return getRuleContext(List_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(BKOOLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(BKOOLParser.COMMA, i);
		}
		public Obj_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_obj_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterObj_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitObj_params(this);
		}
	}

	public final Obj_paramsContext obj_params() throws RecognitionException {
		Obj_paramsContext _localctx = new Obj_paramsContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_obj_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(317);
			list_expr();
			setState(322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(318);
				match(COMMA);
				setState(319);
				list_expr();
				}
				}
				setState(324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_exprContext extends ParserRuleContext {
		public String_exprContext string_expr() {
			return getRuleContext(String_exprContext.class,0);
		}
		public Logical_exprContext logical_expr() {
			return getRuleContext(Logical_exprContext.class,0);
		}
		public Obj_creattionContext obj_creattion() {
			return getRuleContext(Obj_creattionContext.class,0);
		}
		public Arithmetic_exprContext arithmetic_expr() {
			return getRuleContext(Arithmetic_exprContext.class,0);
		}
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public Attr_accessContext attr_access() {
			return getRuleContext(Attr_accessContext.class,0);
		}
		public Index_exprContext index_expr() {
			return getRuleContext(Index_exprContext.class,0);
		}
		public List_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterList_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitList_expr(this);
		}
	}

	public final List_exprContext list_expr() throws RecognitionException {
		List_exprContext _localctx = new List_exprContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_list_expr);
		try {
			setState(332);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(325);
				string_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(326);
				logical_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(327);
				obj_creattion();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(328);
				arithmetic_expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(329);
				method_access();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(330);
				attr_access();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(331);
				index_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_exprContext extends ParserRuleContext {
		public Name_index_exprContext name_index_expr() {
			return getRuleContext(Name_index_exprContext.class,0);
		}
		public TerminalNode LSB() { return getToken(BKOOLParser.LSB, 0); }
		public IndexContext index() {
			return getRuleContext(IndexContext.class,0);
		}
		public TerminalNode RSB() { return getToken(BKOOLParser.RSB, 0); }
		public Index_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIndex_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIndex_expr(this);
		}
	}

	public final Index_exprContext index_expr() throws RecognitionException {
		Index_exprContext _localctx = new Index_exprContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_index_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(334);
			name_index_expr();
			setState(335);
			match(LSB);
			setState(336);
			index();
			setState(337);
			match(RSB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_index_exprContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public Attr_accessContext attr_access() {
			return getRuleContext(Attr_accessContext.class,0);
		}
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public Name_index_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_index_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterName_index_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitName_index_expr(this);
		}
	}

	public final Name_index_exprContext name_index_expr() throws RecognitionException {
		Name_index_exprContext _localctx = new Name_index_exprContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_name_index_expr);
		try {
			setState(342);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(339);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(340);
				attr_access();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(341);
				method_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexContext extends ParserRuleContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return getRuleContext(Arithmetic_exprContext.class,0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIndex(this);
		}
	}

	public final IndexContext index() throws RecognitionException {
		IndexContext _localctx = new IndexContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(344);
			arithmetic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_const_exprContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public List<Int_const_exprContext> int_const_expr() {
			return getRuleContexts(Int_const_exprContext.class);
		}
		public Int_const_exprContext int_const_expr(int i) {
			return getRuleContext(Int_const_exprContext.class,i);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode INT_LITERAL() { return getToken(BKOOLParser.INT_LITERAL, 0); }
		public Int_arithmetic_operatorContext int_arithmetic_operator() {
			return getRuleContext(Int_arithmetic_operatorContext.class,0);
		}
		public Int_const_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_const_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterInt_const_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitInt_const_expr(this);
		}
	}

	public final Int_const_exprContext int_const_expr() throws RecognitionException {
		return int_const_expr(0);
	}

	private Int_const_exprContext int_const_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Int_const_exprContext _localctx = new Int_const_exprContext(_ctx, _parentState);
		Int_const_exprContext _prevctx = _localctx;
		int _startState = 72;
		enterRecursionRule(_localctx, 72, RULE_int_const_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(352);
			switch (_input.LA(1)) {
			case LB:
				{
				setState(347);
				match(LB);
				setState(348);
				int_const_expr(0);
				setState(349);
				match(RB);
				}
				break;
			case INT_LITERAL:
				{
				setState(351);
				match(INT_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(360);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Int_const_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_int_const_expr);
					setState(354);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(355);
					int_arithmetic_operator();
					setState(356);
					int_const_expr(4);
					}
					} 
				}
				setState(362);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Float_const_exprContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public List<Float_const_exprContext> float_const_expr() {
			return getRuleContexts(Float_const_exprContext.class);
		}
		public Float_const_exprContext float_const_expr(int i) {
			return getRuleContext(Float_const_exprContext.class,i);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Numeric_literalContext numeric_literal() {
			return getRuleContext(Numeric_literalContext.class,0);
		}
		public Float_arithmetic_operatorContext float_arithmetic_operator() {
			return getRuleContext(Float_arithmetic_operatorContext.class,0);
		}
		public Float_const_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_float_const_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterFloat_const_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitFloat_const_expr(this);
		}
	}

	public final Float_const_exprContext float_const_expr() throws RecognitionException {
		return float_const_expr(0);
	}

	private Float_const_exprContext float_const_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Float_const_exprContext _localctx = new Float_const_exprContext(_ctx, _parentState);
		Float_const_exprContext _prevctx = _localctx;
		int _startState = 74;
		enterRecursionRule(_localctx, 74, RULE_float_const_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(369);
			switch (_input.LA(1)) {
			case LB:
				{
				setState(364);
				match(LB);
				setState(365);
				float_const_expr(0);
				setState(366);
				match(RB);
				}
				break;
			case INT_LITERAL:
			case FLOAT_LITERAL:
				{
				setState(368);
				numeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(377);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Float_const_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_float_const_expr);
					setState(371);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(372);
					float_arithmetic_operator();
					setState(373);
					float_const_expr(4);
					}
					} 
				}
				setState(379);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class String_exprContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public List<String_exprContext> string_expr() {
			return getRuleContexts(String_exprContext.class);
		}
		public String_exprContext string_expr(int i) {
			return getRuleContext(String_exprContext.class,i);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Index_exprContext index_expr() {
			return getRuleContext(Index_exprContext.class,0);
		}
		public Attr_accessContext attr_access() {
			return getRuleContext(Attr_accessContext.class,0);
		}
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public Obj_creattionContext obj_creattion() {
			return getRuleContext(Obj_creattionContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(BKOOLParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public TerminalNode CONCAT() { return getToken(BKOOLParser.CONCAT, 0); }
		public String_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterString_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitString_expr(this);
		}
	}

	public final String_exprContext string_expr() throws RecognitionException {
		return string_expr(0);
	}

	private String_exprContext string_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		String_exprContext _localctx = new String_exprContext(_ctx, _parentState);
		String_exprContext _prevctx = _localctx;
		int _startState = 76;
		enterRecursionRule(_localctx, 76, RULE_string_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(391);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(381);
				match(LB);
				setState(382);
				string_expr(0);
				setState(383);
				match(RB);
				}
				break;
			case 2:
				{
				setState(385);
				index_expr();
				}
				break;
			case 3:
				{
				setState(386);
				attr_access();
				}
				break;
			case 4:
				{
				setState(387);
				method_access();
				}
				break;
			case 5:
				{
				setState(388);
				obj_creattion();
				}
				break;
			case 6:
				{
				setState(389);
				match(STRING_LITERAL);
				}
				break;
			case 7:
				{
				setState(390);
				match(ID);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(398);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new String_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_string_expr);
					setState(393);
					if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
					setState(394);
					match(CONCAT);
					setState(395);
					string_expr(9);
					}
					} 
				}
				setState(400);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class String_const_exprContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public List<String_const_exprContext> string_const_expr() {
			return getRuleContexts(String_const_exprContext.class);
		}
		public String_const_exprContext string_const_expr(int i) {
			return getRuleContext(String_const_exprContext.class,i);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(BKOOLParser.STRING_LITERAL, 0); }
		public TerminalNode CONCAT() { return getToken(BKOOLParser.CONCAT, 0); }
		public String_const_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_const_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterString_const_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitString_const_expr(this);
		}
	}

	public final String_const_exprContext string_const_expr() throws RecognitionException {
		return string_const_expr(0);
	}

	private String_const_exprContext string_const_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		String_const_exprContext _localctx = new String_const_exprContext(_ctx, _parentState);
		String_const_exprContext _prevctx = _localctx;
		int _startState = 78;
		enterRecursionRule(_localctx, 78, RULE_string_const_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(407);
			switch (_input.LA(1)) {
			case LB:
				{
				setState(402);
				match(LB);
				setState(403);
				string_const_expr(0);
				setState(404);
				match(RB);
				}
				break;
			case STRING_LITERAL:
				{
				setState(406);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(414);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new String_const_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_string_const_expr);
					setState(409);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(410);
					match(CONCAT);
					setState(411);
					string_const_expr(4);
					}
					} 
				}
				setState(416);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logical_exprContext extends ParserRuleContext {
		public TerminalNode LOGICAL_NOT() { return getToken(BKOOLParser.LOGICAL_NOT, 0); }
		public List<Logical_exprContext> logical_expr() {
			return getRuleContexts(Logical_exprContext.class);
		}
		public Logical_exprContext logical_expr(int i) {
			return getRuleContext(Logical_exprContext.class,i);
		}
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Comparison_exprContext comparison_expr() {
			return getRuleContext(Comparison_exprContext.class,0);
		}
		public Obj_creattionContext obj_creattion() {
			return getRuleContext(Obj_creattionContext.class,0);
		}
		public Attr_accessContext attr_access() {
			return getRuleContext(Attr_accessContext.class,0);
		}
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public Index_exprContext index_expr() {
			return getRuleContext(Index_exprContext.class,0);
		}
		public Logical_literalContext logical_literal() {
			return getRuleContext(Logical_literalContext.class,0);
		}
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public TerminalNode LOGICAL_AND() { return getToken(BKOOLParser.LOGICAL_AND, 0); }
		public TerminalNode LOGICAL_OR() { return getToken(BKOOLParser.LOGICAL_OR, 0); }
		public Logical_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterLogical_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitLogical_expr(this);
		}
	}

	public final Logical_exprContext logical_expr() throws RecognitionException {
		return logical_expr(0);
	}

	private Logical_exprContext logical_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_exprContext _localctx = new Logical_exprContext(_ctx, _parentState);
		Logical_exprContext _prevctx = _localctx;
		int _startState = 80;
		enterRecursionRule(_localctx, 80, RULE_logical_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(431);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(418);
				match(LOGICAL_NOT);
				setState(419);
				logical_expr(8);
				}
				break;
			case 2:
				{
				setState(420);
				match(LB);
				setState(421);
				logical_expr(0);
				setState(422);
				match(RB);
				}
				break;
			case 3:
				{
				setState(424);
				comparison_expr();
				}
				break;
			case 4:
				{
				setState(425);
				obj_creattion();
				}
				break;
			case 5:
				{
				setState(426);
				attr_access();
				}
				break;
			case 6:
				{
				setState(427);
				method_access();
				}
				break;
			case 7:
				{
				setState(428);
				index_expr();
				}
				break;
			case 8:
				{
				setState(429);
				logical_literal();
				}
				break;
			case 9:
				{
				setState(430);
				match(ID);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(441);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(439);
					switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						_localctx = new Logical_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
						setState(433);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(434);
						match(LOGICAL_AND);
						setState(435);
						logical_expr(12);
						}
						break;
					case 2:
						{
						_localctx = new Logical_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
						setState(436);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(437);
						match(LOGICAL_OR);
						setState(438);
						logical_expr(11);
						}
						break;
					}
					} 
				}
				setState(443);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Comparison_exprContext extends ParserRuleContext {
		public List<Comparison_operandContext> comparison_operand() {
			return getRuleContexts(Comparison_operandContext.class);
		}
		public Comparison_operandContext comparison_operand(int i) {
			return getRuleContext(Comparison_operandContext.class,i);
		}
		public Comp_operatorContext comp_operator() {
			return getRuleContext(Comp_operatorContext.class,0);
		}
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public Comparison_exprContext comparison_expr() {
			return getRuleContext(Comparison_exprContext.class,0);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Comparison_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterComparison_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitComparison_expr(this);
		}
	}

	public final Comparison_exprContext comparison_expr() throws RecognitionException {
		Comparison_exprContext _localctx = new Comparison_exprContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_comparison_expr);
		try {
			setState(452);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(444);
				comparison_operand();
				setState(445);
				comp_operator();
				setState(446);
				comparison_operand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(448);
				match(LB);
				setState(449);
				comparison_expr();
				setState(450);
				match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operandContext extends ParserRuleContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return getRuleContext(Arithmetic_exprContext.class,0);
		}
		public Comparison_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterComparison_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitComparison_operand(this);
		}
	}

	public final Comparison_operandContext comparison_operand() throws RecognitionException {
		Comparison_operandContext _localctx = new Comparison_operandContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_comparison_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(454);
			arithmetic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_operatorContext extends ParserRuleContext {
		public TerminalNode GREATER() { return getToken(BKOOLParser.GREATER, 0); }
		public TerminalNode GREATER_OR_EQUAL() { return getToken(BKOOLParser.GREATER_OR_EQUAL, 0); }
		public TerminalNode LESS() { return getToken(BKOOLParser.LESS, 0); }
		public TerminalNode LESS_OR_EQUAL() { return getToken(BKOOLParser.LESS_OR_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(BKOOLParser.EQUAL, 0); }
		public TerminalNode DIFF() { return getToken(BKOOLParser.DIFF, 0); }
		public Comp_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterComp_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitComp_operator(this);
		}
	}

	public final Comp_operatorContext comp_operator() throws RecognitionException {
		Comp_operatorContext _localctx = new Comp_operatorContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_comp_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(456);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIFF) | (1L << EQUAL) | (1L << LESS) | (1L << GREATER) | (1L << LESS_OR_EQUAL) | (1L << GREATER_OR_EQUAL))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arithmetic_exprContext extends ParserRuleContext {
		public TerminalNode SUB() { return getToken(BKOOLParser.SUB, 0); }
		public List<Arithmetic_exprContext> arithmetic_expr() {
			return getRuleContexts(Arithmetic_exprContext.class);
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return getRuleContext(Arithmetic_exprContext.class,i);
		}
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public Index_exprContext index_expr() {
			return getRuleContext(Index_exprContext.class,0);
		}
		public Obj_creattionContext obj_creattion() {
			return getRuleContext(Obj_creattionContext.class,0);
		}
		public Attr_accessContext attr_access() {
			return getRuleContext(Attr_accessContext.class,0);
		}
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public Numeric_literalContext numeric_literal() {
			return getRuleContext(Numeric_literalContext.class,0);
		}
		public TerminalNode ID() { return getToken(BKOOLParser.ID, 0); }
		public Arithmetic_operatorContext arithmetic_operator() {
			return getRuleContext(Arithmetic_operatorContext.class,0);
		}
		public Arithmetic_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmetic_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterArithmetic_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitArithmetic_expr(this);
		}
	}

	public final Arithmetic_exprContext arithmetic_expr() throws RecognitionException {
		return arithmetic_expr(0);
	}

	private Arithmetic_exprContext arithmetic_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arithmetic_exprContext _localctx = new Arithmetic_exprContext(_ctx, _parentState);
		Arithmetic_exprContext _prevctx = _localctx;
		int _startState = 88;
		enterRecursionRule(_localctx, 88, RULE_arithmetic_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(471);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(459);
				match(SUB);
				setState(460);
				arithmetic_expr(8);
				}
				break;
			case 2:
				{
				setState(461);
				match(LB);
				setState(462);
				arithmetic_expr(0);
				setState(463);
				match(RB);
				}
				break;
			case 3:
				{
				setState(465);
				index_expr();
				}
				break;
			case 4:
				{
				setState(466);
				obj_creattion();
				}
				break;
			case 5:
				{
				setState(467);
				attr_access();
				}
				break;
			case 6:
				{
				setState(468);
				method_access();
				}
				break;
			case 7:
				{
				setState(469);
				numeric_literal();
				}
				break;
			case 8:
				{
				setState(470);
				match(ID);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(479);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
					setState(473);
					if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
					setState(474);
					arithmetic_operator();
					setState(475);
					arithmetic_expr(10);
					}
					} 
				}
				setState(481);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Arithmetic_operatorContext extends ParserRuleContext {
		public Int_arithmetic_operatorContext int_arithmetic_operator() {
			return getRuleContext(Int_arithmetic_operatorContext.class,0);
		}
		public Float_arithmetic_operatorContext float_arithmetic_operator() {
			return getRuleContext(Float_arithmetic_operatorContext.class,0);
		}
		public Arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmetic_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterArithmetic_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitArithmetic_operator(this);
		}
	}

	public final Arithmetic_operatorContext arithmetic_operator() throws RecognitionException {
		Arithmetic_operatorContext _localctx = new Arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_arithmetic_operator);
		try {
			setState(484);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(482);
				int_arithmetic_operator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(483);
				float_arithmetic_operator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_arithmetic_operatorContext extends ParserRuleContext {
		public TerminalNode MUL() { return getToken(BKOOLParser.MUL, 0); }
		public TerminalNode INT_DIV() { return getToken(BKOOLParser.INT_DIV, 0); }
		public TerminalNode ADD() { return getToken(BKOOLParser.ADD, 0); }
		public TerminalNode SUB() { return getToken(BKOOLParser.SUB, 0); }
		public TerminalNode MOD() { return getToken(BKOOLParser.MOD, 0); }
		public Int_arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_arithmetic_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterInt_arithmetic_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitInt_arithmetic_operator(this);
		}
	}

	public final Int_arithmetic_operatorContext int_arithmetic_operator() throws RecognitionException {
		Int_arithmetic_operatorContext _localctx = new Int_arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_int_arithmetic_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(486);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << MUL) | (1L << INT_DIV) | (1L << MOD))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Float_arithmetic_operatorContext extends ParserRuleContext {
		public TerminalNode MUL() { return getToken(BKOOLParser.MUL, 0); }
		public TerminalNode FLOAT_DIV() { return getToken(BKOOLParser.FLOAT_DIV, 0); }
		public TerminalNode ADD() { return getToken(BKOOLParser.ADD, 0); }
		public TerminalNode SUB() { return getToken(BKOOLParser.SUB, 0); }
		public Float_arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_float_arithmetic_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterFloat_arithmetic_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitFloat_arithmetic_operator(this);
		}
	}

	public final Float_arithmetic_operatorContext float_arithmetic_operator() throws RecognitionException {
		Float_arithmetic_operatorContext _localctx = new Float_arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_float_arithmetic_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(488);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << MUL) | (1L << FLOAT_DIV))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_accessContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(BKOOLParser.DOT, 0); }
		public List<TerminalNode> ID() { return getTokens(BKOOLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(BKOOLParser.ID, i);
		}
		public TerminalNode SELF() { return getToken(BKOOLParser.SELF, 0); }
		public Method_accessContext method_access() {
			return getRuleContext(Method_accessContext.class,0);
		}
		public Attr_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterAttr_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitAttr_access(this);
		}
	}

	public final Attr_accessContext attr_access() throws RecognitionException {
		Attr_accessContext _localctx = new Attr_accessContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_attr_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(493);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(490);
				match(SELF);
				}
				break;
			case 2:
				{
				setState(491);
				match(ID);
				}
				break;
			case 3:
				{
				setState(492);
				method_access();
				}
				break;
			}
			setState(495);
			match(DOT);
			setState(496);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_accessContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(BKOOLParser.DOT, 0); }
		public List<TerminalNode> ID() { return getTokens(BKOOLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(BKOOLParser.ID, i);
		}
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SELF() { return getToken(BKOOLParser.SELF, 0); }
		public Other_method_accessContext other_method_access() {
			return getRuleContext(Other_method_accessContext.class,0);
		}
		public Method_paramsContext method_params() {
			return getRuleContext(Method_paramsContext.class,0);
		}
		public Method_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterMethod_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitMethod_access(this);
		}
	}

	public final Method_accessContext method_access() throws RecognitionException {
		Method_accessContext _localctx = new Method_accessContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_method_access);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(501);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(498);
				match(SELF);
				}
				break;
			case 2:
				{
				setState(499);
				match(ID);
				}
				break;
			case 3:
				{
				setState(500);
				other_method_access();
				}
				break;
			}
			setState(503);
			match(DOT);
			setState(504);
			match(ID);
			setState(505);
			match(LB);
			setState(507);
			_la = _input.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (STRING_LITERAL - 2)) | (1L << (FALSE - 2)) | (1L << (NEW - 2)) | (1L << (SELF - 2)) | (1L << (TRUE - 2)) | (1L << (SUB - 2)) | (1L << (LOGICAL_NOT - 2)) | (1L << (INT_LITERAL - 2)) | (1L << (FLOAT_LITERAL - 2)) | (1L << (ID - 2)) | (1L << (LB - 2)))) != 0)) {
				{
				setState(506);
				method_params();
				}
			}

			setState(509);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_method_accessContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(BKOOLParser.DOT, 0); }
		public List<TerminalNode> ID() { return getTokens(BKOOLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(BKOOLParser.ID, i);
		}
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SELF() { return getToken(BKOOLParser.SELF, 0); }
		public Method_paramsContext method_params() {
			return getRuleContext(Method_paramsContext.class,0);
		}
		public Other_method_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_method_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterOther_method_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitOther_method_access(this);
		}
	}

	public final Other_method_accessContext other_method_access() throws RecognitionException {
		Other_method_accessContext _localctx = new Other_method_accessContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_other_method_access);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(511);
			_la = _input.LA(1);
			if ( !(_la==SELF || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(512);
			match(DOT);
			setState(513);
			match(ID);
			setState(514);
			match(LB);
			setState(516);
			_la = _input.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (STRING_LITERAL - 2)) | (1L << (FALSE - 2)) | (1L << (NEW - 2)) | (1L << (SELF - 2)) | (1L << (TRUE - 2)) | (1L << (SUB - 2)) | (1L << (LOGICAL_NOT - 2)) | (1L << (INT_LITERAL - 2)) | (1L << (FLOAT_LITERAL - 2)) | (1L << (ID - 2)) | (1L << (LB - 2)))) != 0)) {
				{
				setState(515);
				method_params();
				}
			}

			setState(518);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_paramsContext extends ParserRuleContext {
		public List<List_method_paramsContext> list_method_params() {
			return getRuleContexts(List_method_paramsContext.class);
		}
		public List_method_paramsContext list_method_params(int i) {
			return getRuleContext(List_method_paramsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(BKOOLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(BKOOLParser.COMMA, i);
		}
		public Method_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterMethod_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitMethod_params(this);
		}
	}

	public final Method_paramsContext method_params() throws RecognitionException {
		Method_paramsContext _localctx = new Method_paramsContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_method_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(520);
			list_method_params();
			setState(525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(521);
				match(COMMA);
				setState(522);
				list_method_params();
				}
				}
				setState(527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_method_paramsContext extends ParserRuleContext {
		public List_exprContext list_expr() {
			return getRuleContext(List_exprContext.class,0);
		}
		public List_method_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_method_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterList_method_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitList_method_params(this);
		}
	}

	public final List_method_paramsContext list_method_params() throws RecognitionException {
		List_method_paramsContext _localctx = new List_method_paramsContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_list_method_params);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(528);
			list_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_literalContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(BKOOLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(BKOOLParser.FALSE, 0); }
		public Logical_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterLogical_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitLogical_literal(this);
		}
	}

	public final Logical_literalContext logical_literal() throws RecognitionException {
		Logical_literalContext _localctx = new Logical_literalContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_logical_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(530);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_literalContext extends ParserRuleContext {
		public TerminalNode INT_LITERAL() { return getToken(BKOOLParser.INT_LITERAL, 0); }
		public TerminalNode FLOAT_LITERAL() { return getToken(BKOOLParser.FLOAT_LITERAL, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterNumeric_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitNumeric_literal(this);
		}
	}

	public final Numeric_literalContext numeric_literal() throws RecognitionException {
		Numeric_literalContext _localctx = new Numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_numeric_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(532);
			_la = _input.LA(1);
			if ( !(_la==INT_LITERAL || _la==FLOAT_LITERAL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Io_rd_stmtContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode IO_RD_INT() { return getToken(BKOOLParser.IO_RD_INT, 0); }
		public TerminalNode IO_RD_FLOAT() { return getToken(BKOOLParser.IO_RD_FLOAT, 0); }
		public TerminalNode IO_RD_BOOL() { return getToken(BKOOLParser.IO_RD_BOOL, 0); }
		public TerminalNode IO_RD_STR() { return getToken(BKOOLParser.IO_RD_STR, 0); }
		public Io_rd_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_io_rd_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIo_rd_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIo_rd_stmt(this);
		}
	}

	public final Io_rd_stmtContext io_rd_stmt() throws RecognitionException {
		Io_rd_stmtContext _localctx = new Io_rd_stmtContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_io_rd_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(534);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IO_RD_INT) | (1L << IO_RD_FLOAT) | (1L << IO_RD_BOOL) | (1L << IO_RD_STR))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(535);
			match(LB);
			setState(536);
			match(RB);
			setState(537);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Io_wr_int_stmtContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public Arithmetic_exprContext arithmetic_expr() {
			return getRuleContext(Arithmetic_exprContext.class,0);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode IO_WR_INT() { return getToken(BKOOLParser.IO_WR_INT, 0); }
		public TerminalNode IO_WR_INT_LN() { return getToken(BKOOLParser.IO_WR_INT_LN, 0); }
		public Io_wr_int_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_io_wr_int_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIo_wr_int_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIo_wr_int_stmt(this);
		}
	}

	public final Io_wr_int_stmtContext io_wr_int_stmt() throws RecognitionException {
		Io_wr_int_stmtContext _localctx = new Io_wr_int_stmtContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_io_wr_int_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(539);
			_la = _input.LA(1);
			if ( !(_la==IO_WR_INT || _la==IO_WR_INT_LN) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(540);
			match(LB);
			setState(541);
			arithmetic_expr(0);
			setState(542);
			match(RB);
			setState(543);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Io_wr_float_stmtContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public Arithmetic_exprContext arithmetic_expr() {
			return getRuleContext(Arithmetic_exprContext.class,0);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode IO_WR_FLOAT() { return getToken(BKOOLParser.IO_WR_FLOAT, 0); }
		public TerminalNode IO_WR_FLOAT_LN() { return getToken(BKOOLParser.IO_WR_FLOAT_LN, 0); }
		public Io_wr_float_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_io_wr_float_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIo_wr_float_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIo_wr_float_stmt(this);
		}
	}

	public final Io_wr_float_stmtContext io_wr_float_stmt() throws RecognitionException {
		Io_wr_float_stmtContext _localctx = new Io_wr_float_stmtContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_io_wr_float_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(545);
			_la = _input.LA(1);
			if ( !(_la==IO_WR_FLOAT || _la==IO_WR_FLOAT_LN) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(546);
			match(LB);
			setState(547);
			arithmetic_expr(0);
			setState(548);
			match(RB);
			setState(549);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Io_wr_bool_stmtContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public Logical_exprContext logical_expr() {
			return getRuleContext(Logical_exprContext.class,0);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode IO_WR_BOOL() { return getToken(BKOOLParser.IO_WR_BOOL, 0); }
		public TerminalNode IO_WR_BOOL_LN() { return getToken(BKOOLParser.IO_WR_BOOL_LN, 0); }
		public Io_wr_bool_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_io_wr_bool_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIo_wr_bool_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIo_wr_bool_stmt(this);
		}
	}

	public final Io_wr_bool_stmtContext io_wr_bool_stmt() throws RecognitionException {
		Io_wr_bool_stmtContext _localctx = new Io_wr_bool_stmtContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_io_wr_bool_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(551);
			_la = _input.LA(1);
			if ( !(_la==IO_WR_BOOL || _la==IO_WR_BOOL_LN) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(552);
			match(LB);
			setState(553);
			logical_expr(0);
			setState(554);
			match(RB);
			setState(555);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Io_wr_str_stmtContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(BKOOLParser.LB, 0); }
		public String_exprContext string_expr() {
			return getRuleContext(String_exprContext.class,0);
		}
		public TerminalNode RB() { return getToken(BKOOLParser.RB, 0); }
		public TerminalNode SEMICOLON() { return getToken(BKOOLParser.SEMICOLON, 0); }
		public TerminalNode IO_WR_STR() { return getToken(BKOOLParser.IO_WR_STR, 0); }
		public TerminalNode IO_WR_STR_LN() { return getToken(BKOOLParser.IO_WR_STR_LN, 0); }
		public Io_wr_str_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_io_wr_str_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).enterIo_wr_str_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof BKOOLListener ) ((BKOOLListener)listener).exitIo_wr_str_stmt(this);
		}
	}

	public final Io_wr_str_stmtContext io_wr_str_stmt() throws RecognitionException {
		Io_wr_str_stmtContext _localctx = new Io_wr_str_stmtContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_io_wr_str_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(557);
			_la = _input.LA(1);
			if ( !(_la==IO_WR_STR || _la==IO_WR_STR_LN) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(558);
			match(LB);
			setState(559);
			string_expr(0);
			setState(560);
			match(RB);
			setState(561);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36:
			return int_const_expr_sempred((Int_const_exprContext)_localctx, predIndex);
		case 37:
			return float_const_expr_sempred((Float_const_exprContext)_localctx, predIndex);
		case 38:
			return string_expr_sempred((String_exprContext)_localctx, predIndex);
		case 39:
			return string_const_expr_sempred((String_const_exprContext)_localctx, predIndex);
		case 40:
			return logical_expr_sempred((Logical_exprContext)_localctx, predIndex);
		case 44:
			return arithmetic_expr_sempred((Arithmetic_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean int_const_expr_sempred(Int_const_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean float_const_expr_sempred(Float_const_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean string_expr_sempred(String_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 8);
		}
		return true;
	}
	private boolean string_const_expr_sempred(String_const_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean logical_expr_sempred(Logical_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 11);
		case 5:
			return precpred(_ctx, 10);
		}
		return true;
	}
	private boolean arithmetic_expr_sempred(Arithmetic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 9);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3I\u0236\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\6\2|\n\2\r\2\16\2}\3\3\3\3\3\3\3\3\5\3\u0084\n\3\3\3\3\3\3\3\3\3"+
		"\3\4\3\4\3\4\7\4\u008d\n\4\f\4\16\4\u0090\13\4\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\6\3\6\5\6\u009a\n\6\3\7\3\7\3\7\5\7\u009f\n\7\3\7\5\7\u00a2\n\7\3\7"+
		"\3\7\3\7\5\7\u00a7\n\7\3\7\3\7\3\7\3\b\3\b\3\b\7\b\u00af\n\b\f\b\16\b"+
		"\u00b2\13\b\3\t\5\t\u00b5\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n"+
		"\3\n\3\n\5\n\u00c3\n\n\3\13\5\13\u00c6\n\13\3\13\3\13\3\13\3\f\3\f\3\f"+
		"\7\f\u00ce\n\f\f\f\16\f\u00d1\13\f\3\f\3\f\3\f\3\r\3\r\5\r\u00d8\n\r\3"+
		"\16\3\16\3\17\3\17\3\17\3\17\3\17\5\17\u00e1\n\17\3\20\3\20\3\21\3\21"+
		"\3\21\3\21\3\21\3\22\3\22\7\22\u00ec\n\22\f\22\16\22\u00ef\13\22\3\22"+
		"\3\22\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00f9\n\23\3\24\3\24\5\24\u00fd"+
		"\n\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\5\26\u0106\n\26\3\27\3\27\3\27"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0114\n\30\3\31\3\31"+
		"\3\31\3\31\3\31\5\31\u011b\n\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\5\33"+
		"\u0124\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u012c\n\34\3\35\3\35\3"+
		"\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \5 \u013c\n \3 \3 \3"+
		"!\3!\3!\7!\u0143\n!\f!\16!\u0146\13!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u014f"+
		"\n\"\3#\3#\3#\3#\3#\3$\3$\3$\5$\u0159\n$\3%\3%\3&\3&\3&\3&\3&\3&\5&\u0163"+
		"\n&\3&\3&\3&\3&\7&\u0169\n&\f&\16&\u016c\13&\3\'\3\'\3\'\3\'\3\'\3\'\5"+
		"\'\u0174\n\'\3\'\3\'\3\'\3\'\7\'\u017a\n\'\f\'\16\'\u017d\13\'\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u018a\n(\3(\3(\3(\7(\u018f\n(\f(\16(\u0192"+
		"\13(\3)\3)\3)\3)\3)\3)\5)\u019a\n)\3)\3)\3)\7)\u019f\n)\f)\16)\u01a2\13"+
		")\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u01b2\n*\3*\3*\3*\3*\3"+
		"*\3*\7*\u01ba\n*\f*\16*\u01bd\13*\3+\3+\3+\3+\3+\3+\3+\3+\5+\u01c7\n+"+
		"\3,\3,\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u01da\n.\3.\3."+
		"\3.\3.\7.\u01e0\n.\f.\16.\u01e3\13.\3/\3/\5/\u01e7\n/\3\60\3\60\3\61\3"+
		"\61\3\62\3\62\3\62\5\62\u01f0\n\62\3\62\3\62\3\62\3\63\3\63\3\63\5\63"+
		"\u01f8\n\63\3\63\3\63\3\63\3\63\5\63\u01fe\n\63\3\63\3\63\3\64\3\64\3"+
		"\64\3\64\3\64\5\64\u0207\n\64\3\64\3\64\3\65\3\65\3\65\7\65\u020e\n\65"+
		"\f\65\16\65\u0211\13\65\3\66\3\66\3\67\3\67\38\38\39\39\39\39\39\3:\3"+
		":\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3"+
		"=\2\bJLNPRZ>\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64"+
		"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvx\2\16\7\2\t\t\22\22\24\24\32\32\35"+
		"\35\3\2\62\67\4\2,.\60\61\3\2,/\4\2\30\30>>\4\2\20\20\34\34\3\2<=\6\2"+
		"\37\37\"\"%%((\3\2 !\3\2#$\3\2&\'\3\2)*\u0258\2{\3\2\2\2\4\177\3\2\2\2"+
		"\6\u008e\3\2\2\2\b\u0091\3\2\2\2\n\u0099\3\2\2\2\f\u009e\3\2\2\2\16\u00ab"+
		"\3\2\2\2\20\u00b4\3\2\2\2\22\u00c2\3\2\2\2\24\u00c5\3\2\2\2\26\u00ca\3"+
		"\2\2\2\30\u00d7\3\2\2\2\32\u00d9\3\2\2\2\34\u00e0\3\2\2\2\36\u00e2\3\2"+
		"\2\2 \u00e4\3\2\2\2\"\u00e9\3\2\2\2$\u00f2\3\2\2\2&\u00fc\3\2\2\2(\u00fe"+
		"\3\2\2\2*\u0105\3\2\2\2,\u0107\3\2\2\2.\u0113\3\2\2\2\60\u011a\3\2\2\2"+
		"\62\u011c\3\2\2\2\64\u0123\3\2\2\2\66\u012b\3\2\2\28\u012d\3\2\2\2:\u0130"+
		"\3\2\2\2<\u0133\3\2\2\2>\u0137\3\2\2\2@\u013f\3\2\2\2B\u014e\3\2\2\2D"+
		"\u0150\3\2\2\2F\u0158\3\2\2\2H\u015a\3\2\2\2J\u0162\3\2\2\2L\u0173\3\2"+
		"\2\2N\u0189\3\2\2\2P\u0199\3\2\2\2R\u01b1\3\2\2\2T\u01c6\3\2\2\2V\u01c8"+
		"\3\2\2\2X\u01ca\3\2\2\2Z\u01d9\3\2\2\2\\\u01e6\3\2\2\2^\u01e8\3\2\2\2"+
		"`\u01ea\3\2\2\2b\u01ef\3\2\2\2d\u01f7\3\2\2\2f\u0201\3\2\2\2h\u020a\3"+
		"\2\2\2j\u0212\3\2\2\2l\u0214\3\2\2\2n\u0216\3\2\2\2p\u0218\3\2\2\2r\u021d"+
		"\3\2\2\2t\u0223\3\2\2\2v\u0229\3\2\2\2x\u022f\3\2\2\2z|\5\4\3\2{z\3\2"+
		"\2\2|}\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\3\3\2\2\2\177\u0080\7\13\2\2\u0080"+
		"\u0083\7>\2\2\u0081\u0082\7\17\2\2\u0082\u0084\7>\2\2\u0083\u0081\3\2"+
		"\2\2\u0083\u0084\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u0086\7A\2\2\u0086"+
		"\u0087\5\6\4\2\u0087\u0088\7B\2\2\u0088\5\3\2\2\2\u0089\u008d\5\b\5\2"+
		"\u008a\u008d\5\n\6\2\u008b\u008d\5\f\7\2\u008c\u0089\3\2\2\2\u008c\u008a"+
		"\3\2\2\2\u008c\u008b\3\2\2\2\u008d\u0090\3\2\2\2\u008e\u008c\3\2\2\2\u008e"+
		"\u008f\3\2\2\2\u008f\7\3\2\2\2\u0090\u008e\3\2\2\2\u0091\u0092\7>\2\2"+
		"\u0092\u0093\7C\2\2\u0093\u0094\5\16\b\2\u0094\u0095\7D\2\2\u0095\u0096"+
		"\5\"\22\2\u0096\t\3\2\2\2\u0097\u009a\5\20\t\2\u0098\u009a\5\24\13\2\u0099"+
		"\u0097\3\2\2\2\u0099\u0098\3\2\2\2\u009a\13\3\2\2\2\u009b\u009f\5\32\16"+
		"\2\u009c\u009f\5 \21\2\u009d\u009f\5\36\20\2\u009e\u009b\3\2\2\2\u009e"+
		"\u009c\3\2\2\2\u009e\u009d\3\2\2\2\u009f\u00a1\3\2\2\2\u00a0\u00a2\7\31"+
		"\2\2\u00a1\u00a0\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3"+
		"\u00a4\7>\2\2\u00a4\u00a6\7C\2\2\u00a5\u00a7\5\16\b\2\u00a6\u00a5\3\2"+
		"\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9\7D\2\2\u00a9"+
		"\u00aa\5\"\22\2\u00aa\r\3\2\2\2\u00ab\u00b0\5\26\f\2\u00ac\u00ad\7E\2"+
		"\2\u00ad\u00af\5\26\f\2\u00ae\u00ac\3\2\2\2\u00af\u00b2\3\2\2\2\u00b0"+
		"\u00ae\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\17\3\2\2\2\u00b2\u00b0\3\2\2"+
		"\2\u00b3\u00b5\7\31\2\2\u00b4\u00b3\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5"+
		"\u00b6\3\2\2\2\u00b6\u00b7\7\21\2\2\u00b7\u00b8\5\34\17\2\u00b8\u00b9"+
		"\7>\2\2\u00b9\u00ba\7\3\2\2\u00ba\u00bb\5\22\n\2\u00bb\u00bc\7E\2\2\u00bc"+
		"\21\3\2\2\2\u00bd\u00c3\5l\67\2\u00be\u00c3\5n8\2\u00bf\u00c3\5J&\2\u00c0"+
		"\u00c3\5L\'\2\u00c1\u00c3\5P)\2\u00c2\u00bd\3\2\2\2\u00c2\u00be\3\2\2"+
		"\2\u00c2\u00bf\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c1\3\2\2\2\u00c3\23"+
		"\3\2\2\2\u00c4\u00c6\7\31\2\2\u00c5\u00c4\3\2\2\2\u00c5\u00c6\3\2\2\2"+
		"\u00c6\u00c7\3\2\2\2\u00c7\u00c8\5\26\f\2\u00c8\u00c9\7E\2\2\u00c9\25"+
		"\3\2\2\2\u00ca\u00cf\7>\2\2\u00cb\u00cc\7H\2\2\u00cc\u00ce\7>\2\2\u00cd"+
		"\u00cb\3\2\2\2\u00ce\u00d1\3\2\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0\3\2"+
		"\2\2\u00d0\u00d2\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\u00d3\7F\2\2\u00d3"+
		"\u00d4\5\30\r\2\u00d4\27\3\2\2\2\u00d5\u00d8\5 \21\2\u00d6\u00d8\5\34"+
		"\17\2\u00d7\u00d5\3\2\2\2\u00d7\u00d6\3\2\2\2\u00d8\31\3\2\2\2\u00d9\u00da"+
		"\t\2\2\2\u00da\33\3\2\2\2\u00db\u00e1\7\24\2\2\u00dc\u00e1\7\22\2\2\u00dd"+
		"\u00e1\7\t\2\2\u00de\u00e1\7\32\2\2\u00df\u00e1\5\36\20\2\u00e0\u00db"+
		"\3\2\2\2\u00e0\u00dc\3\2\2\2\u00e0\u00dd\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0"+
		"\u00df\3\2\2\2\u00e1\35\3\2\2\2\u00e2\u00e3\7>\2\2\u00e3\37\3\2\2\2\u00e4"+
		"\u00e5\5\34\17\2\u00e5\u00e6\7?\2\2\u00e6\u00e7\5J&\2\u00e7\u00e8\7@\2"+
		"\2\u00e8!\3\2\2\2\u00e9\u00ed\7A\2\2\u00ea\u00ec\5.\30\2\u00eb\u00ea\3"+
		"\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee"+
		"\u00f0\3\2\2\2\u00ef\u00ed\3\2\2\2\u00f0\u00f1\7B\2\2\u00f1#\3\2\2\2\u00f2"+
		"\u00f3\7\23\2\2\u00f3\u00f4\5R*\2\u00f4\u00f5\7\33\2\2\u00f5\u00f8\5&"+
		"\24\2\u00f6\u00f7\7\16\2\2\u00f7\u00f9\5&\24\2\u00f8\u00f6\3\2\2\2\u00f8"+
		"\u00f9\3\2\2\2\u00f9%\3\2\2\2\u00fa\u00fd\5\"\22\2\u00fb\u00fd\5.\30\2"+
		"\u00fc\u00fa\3\2\2\2\u00fc\u00fb\3\2\2\2\u00fd\'\3\2\2\2\u00fe\u00ff\7"+
		"\36\2\2\u00ff\u0100\5R*\2\u0100\u0101\7\r\2\2\u0101\u0102\5*\26\2\u0102"+
		")\3\2\2\2\u0103\u0106\5\"\22\2\u0104\u0106\5.\30\2\u0105\u0103\3\2\2\2"+
		"\u0105\u0104\3\2\2\2\u0106+\3\2\2\2\u0107\u0108\5d\63\2\u0108\u0109\7"+
		"E\2\2\u0109-\3\2\2\2\u010a\u0114\5\62\32\2\u010b\u0114\5\24\13\2\u010c"+
		"\u0114\5,\27\2\u010d\u0114\5$\23\2\u010e\u0114\5(\25\2\u010f\u0114\5:"+
		"\36\2\u0110\u0114\58\35\2\u0111\u0114\5<\37\2\u0112\u0114\5\60\31\2\u0113"+
		"\u010a\3\2\2\2\u0113\u010b\3\2\2\2\u0113\u010c\3\2\2\2\u0113\u010d\3\2"+
		"\2\2\u0113\u010e\3\2\2\2\u0113\u010f\3\2\2\2\u0113\u0110\3\2\2\2\u0113"+
		"\u0111\3\2\2\2\u0113\u0112\3\2\2\2\u0114/\3\2\2\2\u0115\u011b\5p9\2\u0116"+
		"\u011b\5r:\2\u0117\u011b\5t;\2\u0118\u011b\5v<\2\u0119\u011b\5x=\2\u011a"+
		"\u0115\3\2\2\2\u011a\u0116\3\2\2\2\u011a\u0117\3\2\2\2\u011a\u0118\3\2"+
		"\2\2\u011a\u0119\3\2\2\2\u011b\61\3\2\2\2\u011c\u011d\5\64\33\2\u011d"+
		"\u011e\7I\2\2\u011e\u011f\5\66\34\2\u011f\u0120\7E\2\2\u0120\63\3\2\2"+
		"\2\u0121\u0124\7>\2\2\u0122\u0124\5D#\2\u0123\u0121\3\2\2\2\u0123\u0122"+
		"\3\2\2\2\u0124\65\3\2\2\2\u0125\u012c\5Z.\2\u0126\u012c\5R*\2\u0127\u012c"+
		"\5> \2\u0128\u012c\5l\67\2\u0129\u012c\5n8\2\u012a\u012c\7>\2\2\u012b"+
		"\u0125\3\2\2\2\u012b\u0126\3\2\2\2\u012b\u0127\3\2\2\2\u012b\u0128\3\2"+
		"\2\2\u012b\u0129\3\2\2\2\u012b\u012a\3\2\2\2\u012c\67\3\2\2\2\u012d\u012e"+
		"\7\n\2\2\u012e\u012f\7E\2\2\u012f9\3\2\2\2\u0130\u0131\7\f\2\2\u0131\u0132"+
		"\7E\2\2\u0132;\3\2\2\2\u0133\u0134\7\27\2\2\u0134\u0135\5B\"\2\u0135\u0136"+
		"\7E\2\2\u0136=\3\2\2\2\u0137\u0138\7\25\2\2\u0138\u0139\7>\2\2\u0139\u013b"+
		"\7C\2\2\u013a\u013c\5@!\2\u013b\u013a\3\2\2\2\u013b\u013c\3\2\2\2\u013c"+
		"\u013d\3\2\2\2\u013d\u013e\7D\2\2\u013e?\3\2\2\2\u013f\u0144\5B\"\2\u0140"+
		"\u0141\7H\2\2\u0141\u0143\5B\"\2\u0142\u0140\3\2\2\2\u0143\u0146\3\2\2"+
		"\2\u0144\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145A\3\2\2\2\u0146\u0144"+
		"\3\2\2\2\u0147\u014f\5N(\2\u0148\u014f\5R*\2\u0149\u014f\5> \2\u014a\u014f"+
		"\5Z.\2\u014b\u014f\5d\63\2\u014c\u014f\5b\62\2\u014d\u014f\5D#\2\u014e"+
		"\u0147\3\2\2\2\u014e\u0148\3\2\2\2\u014e\u0149\3\2\2\2\u014e\u014a\3\2"+
		"\2\2\u014e\u014b\3\2\2\2\u014e\u014c\3\2\2\2\u014e\u014d\3\2\2\2\u014f"+
		"C\3\2\2\2\u0150\u0151\5F$\2\u0151\u0152\7?\2\2\u0152\u0153\5H%\2\u0153"+
		"\u0154\7@\2\2\u0154E\3\2\2\2\u0155\u0159\7>\2\2\u0156\u0159\5b\62\2\u0157"+
		"\u0159\5d\63\2\u0158\u0155\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0157\3\2"+
		"\2\2\u0159G\3\2\2\2\u015a\u015b\5Z.\2\u015bI\3\2\2\2\u015c\u015d\b&\1"+
		"\2\u015d\u015e\7C\2\2\u015e\u015f\5J&\2\u015f\u0160\7D\2\2\u0160\u0163"+
		"\3\2\2\2\u0161\u0163\7<\2\2\u0162\u015c\3\2\2\2\u0162\u0161\3\2\2\2\u0163"+
		"\u016a\3\2\2\2\u0164\u0165\f\5\2\2\u0165\u0166\5^\60\2\u0166\u0167\5J"+
		"&\6\u0167\u0169\3\2\2\2\u0168\u0164\3\2\2\2\u0169\u016c\3\2\2\2\u016a"+
		"\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016bK\3\2\2\2\u016c\u016a\3\2\2\2"+
		"\u016d\u016e\b\'\1\2\u016e\u016f\7C\2\2\u016f\u0170\5L\'\2\u0170\u0171"+
		"\7D\2\2\u0171\u0174\3\2\2\2\u0172\u0174\5n8\2\u0173\u016d\3\2\2\2\u0173"+
		"\u0172\3\2\2\2\u0174\u017b\3\2\2\2\u0175\u0176\f\5\2\2\u0176\u0177\5`"+
		"\61\2\u0177\u0178\5L\'\6\u0178\u017a\3\2\2\2\u0179\u0175\3\2\2\2\u017a"+
		"\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017cM\3\2\2\2"+
		"\u017d\u017b\3\2\2\2\u017e\u017f\b(\1\2\u017f\u0180\7C\2\2\u0180\u0181"+
		"\5N(\2\u0181\u0182\7D\2\2\u0182\u018a\3\2\2\2\u0183\u018a\5D#\2\u0184"+
		"\u018a\5b\62\2\u0185\u018a\5d\63\2\u0186\u018a\5> \2\u0187\u018a\7\4\2"+
		"\2\u0188\u018a\7>\2\2\u0189\u017e\3\2\2\2\u0189\u0183\3\2\2\2\u0189\u0184"+
		"\3\2\2\2\u0189\u0185\3\2\2\2\u0189\u0186\3\2\2\2\u0189\u0187\3\2\2\2\u0189"+
		"\u0188\3\2\2\2\u018a\u0190\3\2\2\2\u018b\u018c\f\n\2\2\u018c\u018d\7;"+
		"\2\2\u018d\u018f\5N(\13\u018e\u018b\3\2\2\2\u018f\u0192\3\2\2\2\u0190"+
		"\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191O\3\2\2\2\u0192\u0190\3\2\2\2"+
		"\u0193\u0194\b)\1\2\u0194\u0195\7C\2\2\u0195\u0196\5P)\2\u0196\u0197\7"+
		"D\2\2\u0197\u019a\3\2\2\2\u0198\u019a\7\4\2\2\u0199\u0193\3\2\2\2\u0199"+
		"\u0198\3\2\2\2\u019a\u01a0\3\2\2\2\u019b\u019c\f\5\2\2\u019c\u019d\7;"+
		"\2\2\u019d\u019f\5P)\6\u019e\u019b\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e"+
		"\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1Q\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a3"+
		"\u01a4\b*\1\2\u01a4\u01a5\7:\2\2\u01a5\u01b2\5R*\n\u01a6\u01a7\7C\2\2"+
		"\u01a7\u01a8\5R*\2\u01a8\u01a9\7D\2\2\u01a9\u01b2\3\2\2\2\u01aa\u01b2"+
		"\5T+\2\u01ab\u01b2\5> \2\u01ac\u01b2\5b\62\2\u01ad\u01b2\5d\63\2\u01ae"+
		"\u01b2\5D#\2\u01af\u01b2\5l\67\2\u01b0\u01b2\7>\2\2\u01b1\u01a3\3\2\2"+
		"\2\u01b1\u01a6\3\2\2\2\u01b1\u01aa\3\2\2\2\u01b1\u01ab\3\2\2\2\u01b1\u01ac"+
		"\3\2\2\2\u01b1\u01ad\3\2\2\2\u01b1\u01ae\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1"+
		"\u01b0\3\2\2\2\u01b2\u01bb\3\2\2\2\u01b3\u01b4\f\r\2\2\u01b4\u01b5\79"+
		"\2\2\u01b5\u01ba\5R*\16\u01b6\u01b7\f\f\2\2\u01b7\u01b8\78\2\2\u01b8\u01ba"+
		"\5R*\r\u01b9\u01b3\3\2\2\2\u01b9\u01b6\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb"+
		"\u01b9\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bcS\3\2\2\2\u01bd\u01bb\3\2\2\2"+
		"\u01be\u01bf\5V,\2\u01bf\u01c0\5X-\2\u01c0\u01c1\5V,\2\u01c1\u01c7\3\2"+
		"\2\2\u01c2\u01c3\7C\2\2\u01c3\u01c4\5T+\2\u01c4\u01c5\7D\2\2\u01c5\u01c7"+
		"\3\2\2\2\u01c6\u01be\3\2\2\2\u01c6\u01c2\3\2\2\2\u01c7U\3\2\2\2\u01c8"+
		"\u01c9\5Z.\2\u01c9W\3\2\2\2\u01ca\u01cb\t\3\2\2\u01cbY\3\2\2\2\u01cc\u01cd"+
		"\b.\1\2\u01cd\u01ce\7-\2\2\u01ce\u01da\5Z.\n\u01cf\u01d0\7C\2\2\u01d0"+
		"\u01d1\5Z.\2\u01d1\u01d2\7D\2\2\u01d2\u01da\3\2\2\2\u01d3\u01da\5D#\2"+
		"\u01d4\u01da\5> \2\u01d5\u01da\5b\62\2\u01d6\u01da\5d\63\2\u01d7\u01da"+
		"\5n8\2\u01d8\u01da\7>\2\2\u01d9\u01cc\3\2\2\2\u01d9\u01cf\3\2\2\2\u01d9"+
		"\u01d3\3\2\2\2\u01d9\u01d4\3\2\2\2\u01d9\u01d5\3\2\2\2\u01d9\u01d6\3\2"+
		"\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01d8\3\2\2\2\u01da\u01e1\3\2\2\2\u01db"+
		"\u01dc\f\13\2\2\u01dc\u01dd\5\\/\2\u01dd\u01de\5Z.\f\u01de\u01e0\3\2\2"+
		"\2\u01df\u01db\3\2\2\2\u01e0\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2"+
		"\3\2\2\2\u01e2[\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e7\5^\60\2\u01e5"+
		"\u01e7\5`\61\2\u01e6\u01e4\3\2\2\2\u01e6\u01e5\3\2\2\2\u01e7]\3\2\2\2"+
		"\u01e8\u01e9\t\4\2\2\u01e9_\3\2\2\2\u01ea\u01eb\t\5\2\2\u01eba\3\2\2\2"+
		"\u01ec\u01f0\7\30\2\2\u01ed\u01f0\7>\2\2\u01ee\u01f0\5d\63\2\u01ef\u01ec"+
		"\3\2\2\2\u01ef\u01ed\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1"+
		"\u01f2\7G\2\2\u01f2\u01f3\7>\2\2\u01f3c\3\2\2\2\u01f4\u01f8\7\30\2\2\u01f5"+
		"\u01f8\7>\2\2\u01f6\u01f8\5f\64\2\u01f7\u01f4\3\2\2\2\u01f7\u01f5\3\2"+
		"\2\2\u01f7\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\7G\2\2\u01fa"+
		"\u01fb\7>\2\2\u01fb\u01fd\7C\2\2\u01fc\u01fe\5h\65\2\u01fd\u01fc\3\2\2"+
		"\2\u01fd\u01fe\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0200\7D\2\2\u0200e\3"+
		"\2\2\2\u0201\u0202\t\6\2\2\u0202\u0203\7G\2\2\u0203\u0204\7>\2\2\u0204"+
		"\u0206\7C\2\2\u0205\u0207\5h\65\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2"+
		"\2\2\u0207\u0208\3\2\2\2\u0208\u0209\7D\2\2\u0209g\3\2\2\2\u020a\u020f"+
		"\5j\66\2\u020b\u020c\7H\2\2\u020c\u020e\5j\66\2\u020d\u020b\3\2\2\2\u020e"+
		"\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210i\3\2\2\2"+
		"\u0211\u020f\3\2\2\2\u0212\u0213\5B\"\2\u0213k\3\2\2\2\u0214\u0215\t\7"+
		"\2\2\u0215m\3\2\2\2\u0216\u0217\t\b\2\2\u0217o\3\2\2\2\u0218\u0219\t\t"+
		"\2\2\u0219\u021a\7C\2\2\u021a\u021b\7D\2\2\u021b\u021c\7E\2\2\u021cq\3"+
		"\2\2\2\u021d\u021e\t\n\2\2\u021e\u021f\7C\2\2\u021f\u0220\5Z.\2\u0220"+
		"\u0221\7D\2\2\u0221\u0222\7E\2\2\u0222s\3\2\2\2\u0223\u0224\t\13\2\2\u0224"+
		"\u0225\7C\2\2\u0225\u0226\5Z.\2\u0226\u0227\7D\2\2\u0227\u0228\7E\2\2"+
		"\u0228u\3\2\2\2\u0229\u022a\t\f\2\2\u022a\u022b\7C\2\2\u022b\u022c\5R"+
		"*\2\u022c\u022d\7D\2\2\u022d\u022e\7E\2\2\u022ew\3\2\2\2\u022f\u0230\t"+
		"\r\2\2\u0230\u0231\7C\2\2\u0231\u0232\5N(\2\u0232\u0233\7D\2\2\u0233\u0234"+
		"\7E\2\2\u0234y\3\2\2\2\61}\u0083\u008c\u008e\u0099\u009e\u00a1\u00a6\u00b0"+
		"\u00b4\u00c2\u00c5\u00cf\u00d7\u00e0\u00ed\u00f8\u00fc\u0105\u0113\u011a"+
		"\u0123\u012b\u013b\u0144\u014e\u0158\u0162\u016a\u0173\u017b\u0189\u0190"+
		"\u0199\u01a0\u01b1\u01b9\u01bb\u01c6\u01d9\u01e1\u01e6\u01ef\u01f7\u01fd"+
		"\u0206\u020f";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}